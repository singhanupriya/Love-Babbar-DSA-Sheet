https://www.geeksforgeeks.org/detect-and-remove-loop-in-a-linked-list/

Time:O(N), Space:O(1)

1. Detect if loop.
2. if yes, follow steps to find start of the loop.
3. Move slow to head, keep fast where it is, while slow->next!=fast->next (this will be the node just before the start of the loop).
4. Fast->next=NULL

#include<iostream>

using namespace std;

class Node{
	
	public:
		int data;
		Node* next;
		
		Node(int x)
		{
			data=x;
			next=NULL;
		}
};

void print(Node* head)
{
	Node* p=head;
	while(p!=NULL)
	{
		cout<<p->data<<" ";
		p=p->next;
	}
	
	cout<<"\n";
}

void remove_loop(Node* head)
{
	
	Node* p=head;
	Node* q=head;
	
	while(q->next!=NULL && q->next->next!=NULL)
	{
		p=p->next;
		q=q->next->next;
		
		if(p==q)
		{
			break;
		}
	}
	
	if(p!=q)
	{
		cout<<"No loop\n";
		return;
	}
	
	//move slow pointer to head once loop is detected
	p=head;
	while(p->next!=q->next)
	{
		p=p->next;
		q=q->next;
	}
	q->next=NULL;
	
}

int main()
{
	Node* head=new Node(1);
	Node* second=new Node(2);
	Node* three=new Node(3);
	Node* four=new Node(4);
	Node* five=new Node(5);
	
	head->next=second;
	second->next=three;
	three->next=four;
	four->next=five;
	five->next=second;
	
	//print(head);
	
	remove_loop(head);
	print(head);
}
