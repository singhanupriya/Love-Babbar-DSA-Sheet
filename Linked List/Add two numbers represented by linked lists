https://practice.geeksforgeeks.org/problems/add-two-numbers-represented-by-linked-lists/1#

M1-

1. Reverse two LL, add and reverse again.
Time:O(M+N), Space:O(1)

M2-
1. Use 3 stacks to store L1, L2 and resultant sum resp.
Time:O(M+N), Space:O(M+N)


class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    
    void insert_end(struct Node* head,int val)
    {
        Node* p=head;
        while(p->next!=NULL)
        {
            p=p->next;
        }
        
        Node* q=new Node(val);
        p->next=q;
        
    }
    
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
        
        if(first==NULL && second==NULL)
        {
            return NULL;
        }
        
        if(first==NULL)
        {
            return second;
        }
        
        if(second==NULL)
        {
            return first;
        }
        
        
        stack<int> s1;
        stack<int> s2;
        stack<int> s3;
        
        Node* p=first;
        while(p!=NULL)
        {
            s1.push(p->data);
            p=p->next;
        }
        
        Node* q=second;
        while(q!=NULL)
        {
            s2.push(q->data);
            q=q->next;
        }
        
        int carry=0,sum=0;
        
        while(!s1.empty() && !s2.empty())
        {
            int add=s1.top()+s2.top()+carry;
            if(add>=10)
            {
                carry=add/10;
                sum=add%10;
            }
            else
            {
                carry=0;
                sum=add;
            }
            s3.push(sum);
            s1.pop();
            s2.pop();
        }
        
        while(!s1.empty())
        {
            int add=s1.top()+carry;
            if(add>=10)
            {
                carry=add/10;
                sum=add%10;
            }
            else
            {
                carry=0;
                sum=add;
            }
            s3.push(sum);
            s1.pop();
            
        }
        
        while(!s2.empty())
        {
            int add=s2.top()+carry;
            if(add>=10)
            {
                carry=add/10;
                sum=add%10;
            }
            else
            {
                carry=0;
                sum=add;
            }
            s3.push(sum);
            
            s2.pop();
        }
        
        if(carry>0)
        {
            s3.push(carry);
        }
        
        Node* head=new Node(s3.top());
        s3.pop();
        while(!s3.empty())
        {
            insert_end(head,s3.top());
            s3.pop();
        }
        return head;
        
        
    }
};
