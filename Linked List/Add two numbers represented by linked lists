https://practice.geeksforgeeks.org/problems/add-two-numbers-represented-by-linked-lists/1#

M1-

1. Reverse two LL, add and reverse again.
Time:O(M+N), Space:O(1)

M2-
1. Use 3 stacks to store L1, L2 and resultant sum resp.
Time:O(M+N), Space:O(M+N)


class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    
    void insert_end(struct Node* head,int val)
    {
        Node* p=head;
        while(p->next!=NULL)
        {
            p=p->next;
        }
        
        Node* q=new Node(val);
        p->next=q;
        
    }
    
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
        
        if(first==NULL && second==NULL)
        {
            return NULL;
        }
        
        if(first==NULL)
        {
            return second;
        }
        
        if(second==NULL)
        {
            return first;
        }
        
        
        stack<int> s1;
        stack<int> s2;
        stack<int> s3;
        
        Node* p=first;
        while(p!=NULL)
        {
            s1.push(p->data);
            p=p->next;
        }
        
        Node* q=second;
        while(q!=NULL)
        {
            s2.push(q->data);
            q=q->next;
        }
        
        int carry=0,sum=0;
        
        while(!s1.empty() && !s2.empty())
        {
            int add=s1.top()+s2.top()+carry;
            if(add>=10)
            {
                carry=add/10;
                sum=add%10;
            }
            else
            {
                carry=0;
                sum=add;
            }
            s3.push(sum);
            s1.pop();
            s2.pop();
        }
        
        while(!s1.empty())
        {
            int add=s1.top()+carry;
            if(add>=10)
            {
                carry=add/10;
                sum=add%10;
            }
            else
            {
                carry=0;
                sum=add;
            }
            s3.push(sum);
            s1.pop();
            
        }
        
        while(!s2.empty())
        {
            int add=s2.top()+carry;
            if(add>=10)
            {
                carry=add/10;
                sum=add%10;
            }
            else
            {
                carry=0;
                sum=add;
            }
            s3.push(sum);
            
            s2.pop();
        }
        
        if(carry>0)
        {
            s3.push(carry);
        }
        
        Node* head=new Node(s3.top());
        s3.pop();
        while(!s3.empty())
        {
            insert_end(head,s3.top());
            s3.pop();
        }
        return head;
        
        
    }
};


Using recursion:

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;

struct Node{
    int data;
    Node* next;
    
    
    Node(int value)
    {
        data=value;
        next=nullptr;
        
    }
    
};

Node* addSame(Node* head1, Node* head2, int& carry)
{
    if(!head1)
    {
        return nullptr;
    }
    
    int value;
    Node* newHead=new Node(-1);
    newHead->next=addSame(head1->next,head2->next,carry);
    value=head1->data + head2->data + carry;
    
    
    carry=value/10;
    value=value%10;
    
    
    
    
    newHead->data = value;
    return newHead;
}

Node* add(Node* head1, Node* head2)
{
    if(!head1 && !head2)
    {
        return nullptr;
    }
    
    if(!head1)
    {
        return head2;
    }
    
    if(!head2)
    {
        return head1;
    }
    
    int carry=0;
    Node* newHead=addSame(head1,head2,carry);
    
    if(carry>0)
    {
        Node* start=new Node(carry);
        start->next=newHead;
        return start;
    }
    
    return newHead;
}


void print(Node* head)
{
    Node* p=head;
    while(p)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
    
    cout<<"\n";
}

int main()
{
    Node* head1=new Node(9);
    Node* second=new Node(2);
    Node* third=new Node(3);
    
    
    Node* head2=new Node(4);
    Node* five=new Node(5);
    Node* six=new Node(8);
    
    
    head1->next=second;
    
    second->next=third;
    
    
    
    
    
    head2->next=five;
    
    
    five->next=six;
    
    
    
    
    
    
    
    
    
    print(head1);
    print(head2);
    
    Node* newHead=add(head1,head2);
    print(newHead);
    
    
    
    

    return 0;
}
