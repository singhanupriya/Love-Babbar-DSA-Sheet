https://www.geeksforgeeks.org/find-pairs-given-sum-doubly-linked-list/

1. 2 pointers-head and last, like array

Time:O(N), Space:O(1)

#include<iostream>

using namespace std;

class Node{
	public:
		int data;
		Node* next;
		Node* prev;
		
		Node(int x)
		{
			data=x;
			next=NULL;
			prev=NULL;
		}
};

void print(Node* head)
{
	Node* p=head;
	
	while(p!=NULL)
	{
		cout<<p->data<<" ";
		p=p->next;
	}
	cout<<"\n";
}


void find(Node* head, int sum)
{
	if(head==NULL || head->next==NULL)
	{
		cout<<"No pair\n";
		return;
	}
	
	Node* p=head;
	Node* q=head;
	
	while(q->next!=NULL)
	{
		q=q->next;
	}
	
	while(p!=q && q->next!=p) //as we need a pair   so they need to be diff and should not cross each other i.e. i<j
	{
		if(p->data + q->data ==sum)
		{
			cout<<p->data<<" "<<q->data<<"\n";
			p=p->next;
			q=q->prev;
		}
		else if(p->data + q->data > sum)
		{
			q=q->prev;
		}
		else
		{
			p=p->next;
		}
	}
}


int main()
{
	Node* head=new Node(1);
	Node* second=new Node(2);
	Node* three=new Node(4);
	Node* four=new Node(5);
	Node* five=new Node(6);
	Node* six=new Node(8);
	Node* seven=new Node(9);
	
	head->next=second;
	second->prev=head;
	second->next=three;
	three->prev=second;
	three->next=four;
	four->prev=three;
	four->next=five;
	five->prev=four;
	five->next=six;
	six->prev=five;
	six->next=seven;
	seven->prev=six;
	
	print(head);
	
	find(head,7);
	
	
}
