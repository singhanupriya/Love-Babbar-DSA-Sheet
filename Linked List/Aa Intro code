#include<iostream>
using namespace std;

class Node{
	
	public:
		
		int data;
		Node* next;
		
		Node(int x)
		{
			data=x;
			next=NULL;
		}
};

//insert at the begin, return a node pointer
Node* insert_begin(Node* head,int value)
{
	Node* p=new Node(value);
	p->next=head;
	return p;
}

//insert at begin, with void, here pass pointer storing address of head
//*head->stores address of head of LL
void insert_begin1(Node** head, int value)
{
	Node* p=new Node(value);
	p->next=(*head);   //p->next is address of head
	*head=p;  //head which initially stored address of head now stores address of p which is my new head
	
}

void print(Node* head)
{
	Node* p=head;
	
	while(p!=NULL)
	{
		cout<<p->data<<" ";
		p=p->next;
	}
	
	cout<<"\n";
}

void insert_end(Node* head, int value)
{
	Node* p=head;
	while(p->next!=NULL)
	{
		p=p->next;
	}
	Node* q=new Node(value);
	p->next=q;
}

//insert after a given node
void insert_middle(Node* temp, int value)
{
	Node* p=new Node(value);
	p->next=temp->next;
	temp->next=p;
}

//insert at a given position
void insert_middle(Node* head,int pos, int value)
{
	Node* q=new Node(value);
	Node* p=head;
	
	int i=0;
	while(i!=pos-1)
	{
		p=p->next;
		i++;
	}
	q->next=p->next;
	p->next=q;
}

//delete at begin with void, pass a pointer to head

void delete_begin(Node** head)
{
	Node* p=*head;
	*head=(p)->next;   //or *head=(*head)->next;   head now stores the address of element next to head
	delete(p);
}

//delete at begin with returning a node
Node* delete_begin1(Node* head)
{
	Node* p=head;
	head=head->next;
	delete(p);
	return head;
}

void delete_end(Node* head)
{
	Node* p=head;
	while(p->next->next!=NULL)
	{
		p=p->next;
	}
	Node* q=p->next;
	p->next=NULL;
	delete(q);
}

void delete_middle(Node* head,int pos)
{
	Node* p=head;
	int i=0;
	while(i!=pos-1)
	{
		p=p->next;
		i++;
	}
	Node* q=p->next;
	p->next=q->next;
	delete(q);
}

int main()
{
	Node* head=new Node(3);
	Node* second=new Node(5);
	Node* third=new Node(7);
	
	head->next=second;
	second->next=third;
	
	print(head);
	
	//insert at the begin, return a node pointer
	Node* new_head=insert_begin(head,1);
	print(new_head);
	
	
	//insert at begin, with void, here pass pointer storing address of head
	insert_begin1(&head,0);
	print(head);
	
	insert_end(head,10);
	print(head);
	
	insert_middle(second,4);
	print(head);
	
	insert_middle(head,2,100);
	print(head);
	
	insert_middle(head,4,1000);
	print(head);
	
	delete_begin(&head);
	print(head);
	
	//Node* new_head1=delete_begin1(head);
	//print(new_head1);
	
	delete_end(head);
	print(head);
	
	delete_middle(head,2);
	print(head);
	
	delete_middle(head,3);
	print(head);
	
	
	
	return 0;
}
