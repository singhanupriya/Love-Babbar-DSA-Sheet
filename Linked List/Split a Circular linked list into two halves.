https://practice.geeksforgeeks.org/problems/split-a-circular-linked-list-into-two-halves/1#

fast and slow pointer

Time:O(N), Space:O(1)

void splitList(Node *head, Node **head1_ref, Node **head2_ref)
{
    // your code goes here
    
    //if empty
    if(head==NULL)
    {
        *head1_ref=NULL;
        *head2_ref=NULL;
        return;
    }
    
    //if one node only
    if(head->next==head)
    {
        *head1_ref=head;
        
        *head2_ref=NULL;
        return;
    }
    
    //if 2 nodes
    if(head->next->next==head)
    {
        *head1_ref=head;
        
        *head2_ref=head->next;
        (*head1_ref)->next=head;
        (*head2_ref)->next=*head2_ref;;
        return;
    }
    
    //3 or more node
    
    Node* p=head;
    Node* q=head;
    
    while(q->next!=head && q->next->next!=head)
    {
        q=q->next->next;
        p=p->next;
    }
    
    
        *head1_ref=head;
        
        *head2_ref=p->next;
        p->next=head;
        
        if(q->next==head)
        {
            q->next=*head2_ref;
        }
        else
        {
            q->next->next=*head2_ref;
        }
    
    
    
}
