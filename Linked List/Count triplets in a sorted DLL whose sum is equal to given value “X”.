https://www.geeksforgeeks.org/count-triplets-sorted-doubly-linked-list-whose-sum-equal-given-value-x/

1. 3 pointers like array

Time:O(N^2), Space:O(1)

#include<iostream>

using namespace std;

class Node{
	public:
		int data;
		Node* next;
		Node* prev;
		
		Node(int x)
		{
			data=x;
			next=NULL;
			prev=NULL;
		}
};

void print(Node* head)
{
	Node* p=head;
	
	while(p!=NULL)
	{
		cout<<p->data<<" ";
		p=p->next;
	}
	cout<<"\n";
}


void find(Node* head, int x)
{
	if(head==NULL || head->next==NULL || head->next->next==NULL)
	{
		cout<<"No pair\n";
		return;
	}
	bool flag=false;
	
	Node* temp=head;
	while(temp->next!=NULL && temp->next->next!=NULL)  //distinct numbers
	{
		
		Node* p=temp->next;
		Node* q=temp;
		
		while(q->next!=NULL)
		{
			q=q->next;
		}
		int sum=x-temp->data;
		
		while(p!=q && q->next!=p && sum>0) //distinct numbers
		{
			if(p->data + q->data==sum)
			{
				cout<<temp->data<<" "<<p->data<<" "<<q->data<<"\n";
				flag=true;
				p=p->next;
				q=q->prev;
			}
			else if(p->data + q->data > sum)
			{
				q=q->prev;
			}
			else
			{
				p=p->next;
			}
		}
		
		temp=temp->next;
	
		
	}
	
	if(flag==false)
	{
		cout<<"No pair\n";
	}
	
	
}


int main()
{
	Node* head=new Node(1);
	Node* second=new Node(2);
	Node* three=new Node(4);
	Node* four=new Node(5);
	Node* five=new Node(6);
	Node* six=new Node(8);
	Node* seven=new Node(9);
	
	head->next=second;
	second->prev=head;
	second->next=three;
	three->prev=second;
	three->next=four;
	four->prev=three;
	four->next=five;
	five->prev=four;
	five->next=six;
	six->prev=five;
	six->next=seven;
	seven->prev=six;
	
	print(head);
	
	find(head,17);
	
	
}
