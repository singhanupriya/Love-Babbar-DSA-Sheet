

M1- use 2 loops, compare every element of LL1 with every element of LL2. Time:O(M*N), Space:O(1)
https://practice.geeksforgeeks.org/problems/intersection-point-in-y-shapped-linked-lists/1

M2- use has table, if point already visisted. Time:O(M+N), Space:O(M)
M3- use visited flag in node class. Time:O(M+N), Space:O(1)
M4. Store the address of last node in both LL, if same, intersecting, traverse the larger ll upto dispance (len l1-len l2), that node is intersection. Time:O(M+N), Space:O(1)
M5- Two pointer

p- head1, q-head2, move them simultanesouly, if any of them become null, point of head of 2nd ll, after reassigning both, if they dont meet, no intersection.
If any of them become null, the other will be at a dist of the (len l1-len l2)

int intersectPoint(Node* head1, Node* head2)
{
    // Your Code Here
    if(head1==NULL || head2==NULL)
    {
        return -1;
    }
    
    Node* p=head1;
    Node* q=head2;
    
    while(p!=q)
    {
        p=p->next;
        q=q->next;
        
        if(p==q)
        {
            return p->data;
        }
        
        if(p==NULL)
        {
            p=head2;
        }
        
        if(q==NULL)
        {
            q=head1;
        }
    }
    
    return -1;
    
}
