https://www.geeksforgeeks.org/reverse-doubly-linked-list-groups-given-size/

Same logic as reverse ll in group
Use iterative reversal with k, put that in recursion, head->next=rev(next,k) head->next->prev=head, return prev

Time:O(N), Space:O(1)

#include<iostream>

class Node{
	public:
		int data;
		Node* next;
		Node* prev;
		
		Node(int val)
		{
			data=val;
			next=NULL;
			prev=NULL;
		}
};

void traverse(Node* head)
{
	Node* n=head;
	
	while(n!=NULL)
	{
		std::cout<<n->data<<" ";
		n=n->next;
	}
	std::cout<<"\n";
	
	
}

Node* rev(Node* head, int k)
{
	if(head==NULL || head->next==NULL)
	{
		return head;
	}
	
	int i=0;
	Node* curr=head;
	Node* prev=NULL;
	Node* next=NULL;
	
	while(curr!=NULL && i<k)
	{
		next=curr->next;
		curr->next=prev;
		curr->prev=next;
		prev=curr;
		curr=next;
		i++;
	}
	
	
	if(next)
	{
		head->next=rev(next,k);
		head->next->prev=head;
	}
	
	
	return prev;
}


int main()
{
	Node* head=new Node(1);
	Node* second=new Node(2);
	Node* three=new Node(3);
	Node* four=new Node(4);
	Node* five=new Node(5);
	Node* six=new Node(6);
	Node* seven=new Node(7);
	Node* eight=new Node(8);
	
	head->next=second;
	second->next=three;
	three->next=four;
	four->next=five;
	five->next=six;
	six->next=seven;
	seven->next=eight;
	
	second->prev=head;
	three->prev=second;
	four->prev=three;
	five->prev=four;
	six->prev=five;
	seven->prev=six;
	eight->prev=seven;
	
	traverse(head);
	
	Node* new_rev=rev(head,5);
	
	traverse(new_rev);
	
	

	
	
	return 0;
}
