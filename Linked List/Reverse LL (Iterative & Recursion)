https://www.geeksforgeeks.org/reverse-a-linked-list/


Iterative:

Time:O(n), space:O(1)

#include<iostream>

using namespace std;

class Node{
	public:
		int data;
		Node* next;
		
		Node(int x)
		{
			data=x;
			next=NULL;
		}
};

void print(Node* head)
{
	Node* p=head;
	
	while(p!=NULL)
	{
		cout<<p->data<<" ";
		p=p->next;
	}
	cout<<"\n";
}

void reverse(Node** head)
{
	Node* curr=*head;
	Node* prev=NULL;
	Node* next=NULL;
	
	while(curr!=NULL)
	{
		next=curr->next;
		curr->next=prev;
		prev=curr;
		curr=next;
	}
	
	*head=prev;
}


int main()
{
	Node* head=new Node(1);
	Node* second=new Node(2);
	Node* three=new Node(3);
	Node* four=new Node(4);
	
	head->next=second;
	second->next=three;
	three->next=four;
	
	print(head);
	
	reverse(&head);
	print(head);
}



Recursion:

Time:O(n), space:O(1)

#include<iostream>

using namespace std;

class Node{
	public:
		int data;
		Node* next;
		
		Node(int x)
		{
			data=x;
			next=NULL;
		}
};

void print(Node* head)
{
	Node* p=head;
	
	while(p!=NULL)
	{
		cout<<p->data<<" ";
		p=p->next;
	}
	cout<<"\n";
}

Node* reverse_rec(Node* head)
{
	if(head==NULL || head->next==NULL)
	{
		return head;
	}
	
	Node* rest=reverse_rec(head->next);
	head->next->next=head;
	head->next=NULL;
	
	return rest;
}




int main()
{
	Node* head=new Node(1);
	Node* second=new Node(2);
	Node* three=new Node(3);
	Node* four=new Node(4);
	
	head->next=second;
	second->next=three;
	three->next=four;
	
	print(head);
	
	
	
	Node* rev_head=reverse_rec(head);
	print(rev_head);
}
