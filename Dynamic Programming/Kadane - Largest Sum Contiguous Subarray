https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/

Method 1-

Logic- dp[i]- max sum subbary upto i
dp[i]=max(dp[i-1]+arr[i],arr[i])

Time:O(N), Space:O(N)

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>

using namespace std;

int max(int a,int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}

int largestSumSubarray(vector<int> arr, int n)
{
    vector<int> dp(n,0);
    dp[0]=arr[0];
    
    int largest=arr[0];
    
    for(int i=1;i<n;i++)
    {
        dp[i]=max(dp[i-1]+arr[i],arr[i]);
        largest=max(largest,dp[i]);
    }
    
    return largest;
}

int main()
{
    //cout<<"Hello World";
    vector<int> arr={-2, -3, 4, -1, -2, 1, 5, -3};
    int n=8;
    
    if(n==0)
    {
        return 0;
    }
    
    if(n==1)
    {
        return arr[0];
    }
    
    cout<<largestSumSubarray(arr,n);

    return 0;
}


Mthd 2-
Since we olny need the prev value, we can use a variable instead of storing in a array

Time:O(n), Space:O(1)

int largestSumSubarray(vector<int> arr, int n)
{
    int currentMax=arr[0];
    int prevMax=arr[0];
    
    int largest=arr[0];
    
    for(int i=1;i<n;i++)
    {
        currentMax=max(prevMax+arr[i],arr[i]);
        largest=max(largest,currentMax);
        prevMax=currentMax;
    }
    
    return largest;
}
