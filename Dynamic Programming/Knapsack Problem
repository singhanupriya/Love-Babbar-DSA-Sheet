https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1#

Time:O(N*W), Space:O(N*W)

1. If wt[i]<=W, u can include it or not
2. If wt[i]>W, ignore it and move ahead.

class Solution
{
    public:
    
    int max(int a,int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       
       vector<vector<int>> dp(n+1,vector<int>(W+1,0));
       
       for(int i=1;i<=n;i++)
       {
           for(int j=1;j<=W;j++)
           {
               if(wt[i-1]<=j)
               {
                   dp[i][j]=max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
               }
               else
               {
                   dp[i][j]=dp[i-1][j];
               }
           }
       }
       return dp[n][W];
    }
};
