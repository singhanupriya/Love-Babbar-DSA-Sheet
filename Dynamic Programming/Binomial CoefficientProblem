https://www.youtube.com/watch?v=jIb1W3ObIho

nCr=(n!)/r!(n-r)!
Time comp of factor is O(n)  --> O(n/r*(n-r))

Optimise-

Observation
nCn=nC0=1 pascal's triangle

1
1 1
1 2 1
1 3 3 1
1 4 6 4 1

nCr=(n-1)C(r-1) + (n-1)Cr

Method 2- use normal recursion, we see overlapping, we can use DP, memoisation
Method 3- Top down

Time:O(N*r), Space:O(N*r)

int nCr(int n, int r){
        // code here
        
        int dp[n+1][r+1];
        
        if(r>n)
        return 0; 
        
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=min(i,r);j++)
            {
                
                if(j==0|| j==i)
                {
                    dp[i][j]=1;
                }
                else
                {
                    dp[i][j]=dp[i-1][j]+dp[i-1][j-1];
                }
                
                cout<<dp[j]<<" ";
            }
            cout<<"\n";
        }
        
        return dp[r];
        
    }


Method 4- if we carefully observe for calculating n, we need values of only the row above it (n-1)

Time:o(n*r), Space:O(r)

int nCr(int n, int r){
        // code here
        
        int dp[r+1];  //Use 1-d array
        
        //dp[0]=1;
        for(int i=0;i<=n;i++)
        {  
            for(int j=min(i,r);j>=0;j--)    //calculating backwards coz if u cal from 0 to r, u are calculating j-1 so for j = j-1 + j , new value of j-1 will be added
            {
                //int prev=dp[j-1];
                if(j==0|| j==i)
                {
                    dp[j]=1;
                }
                else
                {
                    dp[j]=dp[j]+dp[j-1];
                }
                
                cout<<dp[j]<<" ";
            }
            cout<<"\n";
        }
        
        return dp[r];
        
    }
