https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/

Same as LSC of 2 strings just make it 3d- dp[i][j][k]
1. If last chars same dp[i][j][k]=1+dp[i-1][j-1][k-1];
else one not there and remaining two there from all three  dp[i][j][k]=max(dp[i-1][j][k],dp[i][j-1][k],dp[i][j][k-1]);

int max(int a,int b, int c)
{
    if(a>=b && a>=c)
    {
        return a;
    }
    else if(b>=c && b>=a)
    {
        return b;
    }
    return c;
}

int LCSof3 (string A, string B, string C, int n1, int n2, int n3)
{
    // your code here
    
    if(n1==0 || n2==0 || n3==0)
    {
        return 0;
    }
    
    if(A[n1-1]==B[n2-1]==C[n3-1])
    {
        return 1+LCSof3(A,B,C,n1-1,n2-1,n3-1);
        
    }
    else
    {
        return max(LCSof3(A,B,C,n1-1,n2,n3),LCSof3(A,B,C,n1,n2-1,n3),LCSof3(A,B,C,n1,n2,n3-1));
    }
}

Top down

Time:O(m*n*z), Space:O(n*m*z)

int max(int a,int b, int c)
{
    if(a>=b && a>=c)
    {
        return a;
    }
    else if(b>=c && b>=a)
    {
        return b;
    }
    return c;
}

int LCSof3 (string A, string B, string C, int n1, int n2, int n3)
{
    // your code here
    
    
    vector<vector<vector<int>>> dp(n1+1,vector<vector<int>>(n2+1,vector<int>(n3+1,0)));
    
    for(int i=1;i<=n1;i++)
    {
        for(int j=1;j<=n2;j++)
        {
            for(int k=1;k<=n3;k++)
            {
                if(A[i-1]==B[j-1] && B[j-1]==C[k-1])
                {
                    dp[i][j][k]=1+dp[i-1][j-1][k-1];
                }
                else
                {
                    dp[i][j][k]=max(dp[i-1][j][k],dp[i][j-1][k],dp[i][j][k-1]);
                }
            }
        }
    }
    
    return dp[n1][n2][n3];
    
}
