

1 Transation = bUy and sell, so u pay the fees after u have sold

Method 1: Recursion

Time:O(2^N), Space:O(N)

 int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    int solve(int index, bool buy, int n, vector<int>& prices, int fee)
    {
        if(index==n)
        {
            return 0;
        }
        
        
        if(buy) //buy or not buy
        {
            return max(-prices[index]+solve(index+1,0,n,prices,fee), solve(index+1,1,n,prices,fee));
        }
        else
        {
            return max(prices[index]-fee+solve(index+1,1,n,prices,fee), solve(index+1,0,n,prices,fee));
        }
        
    }
    
    int maxProfit(vector<int>& prices, int fee) {
        
        int n=prices.size();
        
        return solve(0,1,n,prices,fee);
        
    }
};


Method 2: Memoization

Time:O(N*2), Space:O(N*2 + N)

 int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    int solve(int index, bool buy, int n, vector<int>& prices, int fee,vector<vector<int>>& dp)
    {
        if(index==n)
        {
            return 0;
        }
        
        if(dp[index][buy]!=-1)
        {
            return dp[index][buy];
        }
        
        if(buy) //buy or not buy
        {
            return dp[index][buy]=max(-prices[index]+solve(index+1,0,n,prices,fee,dp), solve(index+1,1,n,prices,fee,dp));
        }
        else
        {
            return dp[index][buy]=max(prices[index]-fee+solve(index+1,1,n,prices,fee,dp), solve(index+1,0,n,prices,fee,dp));
        }
        
    }
    
    int maxProfit(vector<int>& prices, int fee) {
        
        int n=prices.size();
        
        //index - 0 to n
        vector<vector<int>> dp(n+1,vector<int>(2,-1));
        
        return solve(0,1,n,prices,fee,dp);
        
    }
};

Method 3: Bottom up

Time:O(N), Space:O(N)

 int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    
    
    int maxProfit(vector<int>& prices, int fee) {
        
        int n=prices.size();
        
        //index - 0 to n
        vector<vector<int>> dp(n+1,vector<int>(2,0));
        
        dp[n][0]=0;
        dp[n][1]=0; //as index=0, return 0 in recursion
        
        
        for(int index=n-1;index>=0;index--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy==0) //sell or not sell
                {
                    dp[index][buy]=max(prices[index]-fee+dp[index+1][1],dp[index+1][0]);
                }
                else //buy or not buy
                {
                    dp[index][buy]=max(-prices[index]+dp[index+1][0],dp[index+1][1]);
                }
            }
        }
        
        
        return dp[0][1]; //buy
        
    }
};

Method 4: Space optimised bottom up

Time:O(N), Space:O(1)

 int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    
    
    int maxProfit(vector<int>& prices, int fee) {
        
        int n=prices.size();
        
        //index - 0 to n
        
        
        int aheadBuy=0; //dp[n][1]
        int aheadNotBuy=0;  //dp[n][0]
        
        int currBuy=0;
        int currNotBuy=0;
        
        
        for(int index=n-1;index>=0;index--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy==0) //sell or not sell
                {
                    currNotBuy=max(prices[index]-fee+aheadBuy,aheadNotBuy);
                }
                else //buy or not buy
                {
                    currBuy=max(-prices[index]+aheadNotBuy,aheadBuy);
                }
                aheadBuy=currBuy;
                aheadNotBuy=currNotBuy;
            }
            
            
        }
        
        
        return aheadBuy; //buy
        
    }
