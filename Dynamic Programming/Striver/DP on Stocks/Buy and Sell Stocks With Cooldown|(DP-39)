https://www.youtube.com/watch?v=IGIe46xw3YY

If u sell on a day, u can't buy on the next day

Method 1: Recursion

Time:O(2^N), Space:O(N)

 int solve(int index, bool buy, int n ,vector<int>& prices )
    {
        if(index>=n)
        {
            return 0;
        }
        
        if(buy)  //buy or not buy
        {
            return max(-prices[index]+solve(index+1,0,n,prices),0+solve(index+1,1,n,prices));
        }
        else //sell or not sell
        {
            return max(prices[index]+solve(index+2,1,n,prices), solve(index+1,0,n,prices));
            //as after selling u can't buy the next day
        }
        
    }
    
    int maxProfit(vector<int>& prices) {
        
        int n=prices.size();
        
        return solve(0,1,n,prices);
        
    }
};

Method 2: Memoization

Time:O(N*2), Space:O(N*2+N)

 int solve(int index, bool buy, int n ,vector<int>& prices ,vector<vector<int>>& dp)
    {
        if(index>=n)
        {
            return 0;
        }
        
        if(dp[index][buy]!=-1)
        {
            return dp[index][buy];
        }
        
        if(buy)  //buy or not buy
        {
            return dp[index][buy]=max(-prices[index]+solve(index+1,0,n,prices,dp),0+solve(index+1,1,n,prices,dp));
        }
        else //sell or not sell
        {
            return dp[index][buy]=max(prices[index]+solve(index+2,1,n,prices,dp), solve(index+1,0,n,prices,dp));
            //as after selling u can't buy the next day
        }
        
    }
    
    int maxProfit(vector<int>& prices) {
        
        int n=prices.size();
        
        //index goes from 0 to n
        
        vector<vector<int>> dp(n+1,vector<int>(2,-1));
        
        return solve(0,1,n,prices,dp);
        
    }
};

Method 3:

Time:O(N*2), Space:O(N*2)

 int max(int a, int b)
   {
       if(a>=b)
       {
           return a;
       }
       return b;
   }
    
    int maxProfit(vector<int>& prices) {
        
        int n=prices.size();
        
        //index goes from 0 to n
        
        vector<vector<int>> dp(n+1,vector<int>(2,0));
        
        dp[n][0]=0;
        dp[n][1]=0;
        
        for(int index=n-1;index>=0;index--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy==0)
                {
                    int notSell=0;
                    int sell=prices[index];
                    
                    if(index+2<=n)
                    {
                        sell+=dp[index+2][1];
                    }
                    
                    
                    notSell=0 + dp[index+1][0];
                    
                    dp[index][buy]=max(sell,notSell);
                }
                else
                {
                    dp[index][buy]=max(-prices[index]+dp[index+1][0],0+dp[index+1][1]);
                }
            }
        }
        
        
        return dp[0][1];
       
        
    }
};
