https://takeuforward.org/data-structure/dynamic-programming-frog-jump-with-k-distances-dp-4/

Recursion:

Time:O(K^n)


#include <iostream>
#include<vector>
#include<climits>

using namespace std;

int min(int a, int b)
{
    if(a<=b)
    {
        return a;
    }
    
    return b;
}

//n->total number of stairs
int solve(int n, vector<int> arr, int k)
{
    if(n<=1)
    {
        return 0;
    }
    
    int temp=INT_MAX;
    for(int i=1;i<=k;i++)
    {
        int energy=solve(n-i,arr,k)+ abs(arr[n-1]-arr[n-i-1]);
        temp=min(temp,energy);
    }
    return temp;
    
}

int main()
{
    vector<int> arr={30,10,60 , 10 , 60 , 50};
    int n=6;
    int k=2;
    
    
    cout<<solve(n,arr,k);

    return 0;
}


Top down:

Time:O(N*k),Space:O(N)

#include <iostream>
#include<vector>
#include<climits>

using namespace std;

int min(int a, int b)
{
    if(a<=b)
    {
        return a;
    }
    
    return b;
}

//n->total number of stairs
int solve(int n, vector<int> arr, int k)
{
    //dp[n]-> min energy when n=total no of stairs
    vector<int> dp(n+1,-1);
    dp[0]=0;
    dp[1]=0;
    
    for(int i=2;i<=n;i++)
    {
        int temp=INT_MAX;
        for(int j=1;j<=k;j++)
        {
            if(i-j-1>=0)
            {
                int energy= dp[i-j] + abs(arr[i-1]-arr[i-j-1]);
                temp=min(temp,energy);
            }
            
        }
        
        dp[i]=temp;
    }
    
    return dp[n];
    
}

int main()
{
    vector<int> arr={30,10,60 , 10 , 60 , 50};
    int n=6;
    int k=2;
    
    
    cout<<solve(n,arr,k);

    return 0;
