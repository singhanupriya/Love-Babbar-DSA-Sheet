https://takeuforward.org/data-structure/grid-unique-paths-2-dp-9/

Method 1: 
Recursion

//no of ways to reach 0,0 from m-1,n-1

Time:O(2^(m*n))

int solve(int i, int j, vector<vector<int>>& obstacleGrid)
    {
        if(i>=0 && j>=0 && obstacleGrid[i][j]==1) //if obs. , this will also check if obs[0][0] so that has to be before i=0&=0
        {
            return 0;
        }
        
        if(i==0 && j==0)
        {
            return 1;
        }
        
        
        
        if(i<0 || j<0)
        {
            return 0;
        }
        
        int left=solve(i,j-1,obstacleGrid);
        
        
        int up=solve(i-1,j,obstacleGrid);
        
        
        return up+left;
        
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
        
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        return solve(m-1,n-1,obstacleGrid);
        
    }
    
    
    Method 2: Memoization
    
    Time:O(M*N), Space:O(M*N)
    
    int solve(int i, int j, vector<vector<int>>& obstacleGrid,vector<vector<int>>& dp)
    {
        if(i>=0 && j>=0 && obstacleGrid[i][j]==1)
        {
            return 0;
        }
        
        if(i==0 && j==0)  //if no obs at 0,0
        {
            return 1;
        }
        
        
        
        
        if(i<0 || j<0)
        {
            return 0;
        }
        
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        
        int left=solve(i,j-1,obstacleGrid,dp);
        
        
        int up=solve(i-1,j,obstacleGrid,dp);
        
        
        return dp[i][j]=up+left;
        
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
        
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        
        return solve(m-1,n-1,obstacleGrid,dp);
        
    }
    
    
    Method 3:
    
    Top down
    
    Time:O(M*N), Space:O(M*N)
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        
        vector<vector<int>> dp(m,vector<int>(n,-1));
        
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i>=0 && j>=0 && obstacleGrid[i][j]==1)
                {
                    dp[i][j]=0;
                    continue;
                }
                
                if(i==0 && j==0)
                {
                    dp[i][j]=1;
                    continue;
                }
                
                
                int left=0;
                
                if(j>0)
                {
                    left=dp[i][j-1];
                }
                
                int up=0;
                
                if(i>0)
                {
                    up=dp[i-1][j];
                }
                
                dp[i][j]=up+left;
                
            }
        }
        
        return dp[m-1][n-1];
        
    }
