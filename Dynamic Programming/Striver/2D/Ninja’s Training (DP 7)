
https://www.youtube.com/watch?v=AE39gJYuRog

Method 1: Recursion

Time:Task^day

Here index of day is passed, in the recur u will need 2 variables, currDayIndex and lastTask perform
to start the recursion, give the last task as 3 so that u can perform all activities 0,1,2.


int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}

int solve(int day, int lastTask,vector<vector<int>> &points)
{
    
    if(day==0) //only one day
    {
        int maxPoints=0;
        for(int i=0;i<3;i++)
        {
            if(i!=lastTask)
            {
                maxPoints=max(maxPoints,points[day][i]);
            }
            
        }
        return maxPoints;
    }
    
    
    int maxPoints=0;
    
    for(int i=0;i<3;i++)
    {
        if(i!=lastTask)
        {
             int score= points[day][i]+solve(day-1,i,points);
            maxPoints=max(maxPoints,score);
        }
       
    }
    
    return maxPoints;
    
    
    
}


int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    
    return solve(n-1,3,points);
    
}


Method 2 - Memoisation

Time:O(N*4*3),Space:o(m*n)
There are N*4 states and for every state, we are running a for loop iterating three times.


Here days are 0,1,2,3 dayX4 matrix is needed.

int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}

int solve(int day, int lastTask,vector<vector<int>> &points,vector<vector<int>>& dp)
{
    
    if(day==0) //only one day
    {
        int maxPoints=0;
        for(int i=0;i<3;i++)
        {
            if(i!=lastTask)
            {
                maxPoints=max(maxPoints,points[day][i]);
            }
            
        }
        return maxPoints;
    }
    
    if(dp[day][lastTask]!=-1)
    {
        return dp[day][lastTask];
    }
    
    
    int maxPoints=0;
    
    for(int i=0;i<3;i++)
    {
        if(i!=lastTask)
        {
             int score= points[day][i]+solve(day-1,i,points,dp);
            maxPoints=max(maxPoints,score);
        }
       
    }
    
    return dp[day][lastTask]=maxPoints;
    
    
    
}


int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<vector<int>> dp(n,vector<int>(4,-1));
    return solve(n-1,3,points,dp);
    
}


Method 3- Top Down

Time:O(N*4*3)=O(N)

int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}


int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    
    //dp[day][lastTask]
    
    vector<vector<int>> dp(n,vector<int>(4,-1));
    
    dp[0][0]=max(points[0][1], points[0][2]);
    dp[0][1]=max(points[0][0], points[0][2]);
    dp[0][2]=max(points[0][1], points[0][0]);
    dp[0][3]=max(points[0][1], max(points[0][2], points[0][0]));
    
    
    for(int i=1;i<n;i++) //day index
    {
        for(int lastTask=0;lastTask<=3;lastTask++) //task
        dp[i][lastTask]=0; //for that day no points scored 
        {
            int maxPoints=0;
            for(int j=0;j<=2;j++)
            {
                if(j!=last)
                {
                    int score=points[i][j]+dp[i-1][j];
                    maxPoints=max(maxPoints,energy);
                }
            }
        }
        
            
        
    }
    
    return dp[n-1][3];
    
    
}
