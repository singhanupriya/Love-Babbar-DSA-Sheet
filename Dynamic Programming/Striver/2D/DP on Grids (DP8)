https://www.youtube.com/watch?v=sdE0A2Oxofw

//no of ways u can reach 0,0 from i,j
Method 1: Recursion

Time:O(2^(m*n))

 int solve(int i, int j)
    {
        if(i==0 && j==0)
        {
            return 1;  //path exists
        }
        
        if(i<0 || j<0)
        {
            return 0;  //out of bounds
        } 
        
        int up=solve(i-1,j);
        int left=solve(i,j-1);
        
        return left+up;
        
    }
    
    int uniquePaths(int m, int n) {
        
        return solve(m-1,n-1);
        
    }
    
    Method 2: We have overlapping subproblems
    
    Time:O(M*N), Space:O(M*N)
    
     int solve(int i, int j,vector<vector<int>>& dp)
    {
        if(i==0 && j==0)
        {
            return 1;  //path exists
        }
        
        if(i<0 || j<0)
        {
            return 0;  //out of bounds
        } 
        
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        
        int up=solve(i-1,j,dp);
        int left=solve(i,j-1,dp);
        
        return dp[i][j]=left+up;
        
    }
    
    int uniquePaths(int m, int n) {
        
        vector<vector<int>> dp(m,vector<int>(n,-1));
        
        return solve(m-1,n-1,dp);
        
    }
    
    
    Method 3:Top down
    //no of ways u can reach 0,0 from i,j
    
    Time:O(M*N), Space:O(M*N)
    
    int uniquePaths(int m, int n) {
        
        //no of ways u can reach 0,0 from i,j
        vector<vector<int>> dp(m,vector<int>(n,-1));
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0 && j==0)
                {
                    dp[i][j]=1;
                    continue;
                }
                
                
                int up=0;
                if(i-1>=0)
                {
                    up=dp[i-1][j];
                }
                
                int left=0;
                if(j-1>=0)
                {
                     left=dp[i][j-1];
                }
                
                dp[i][j]=left+up;
               
                
                
                
                
            }
        }
        
        return dp[m-1][n-1];
        
    }
