https://www.youtube.com/watch?v=ZmlQ3vgAOMo
https://practice.geeksforgeeks.org/problems/wildcard-pattern-matching/1#

1. There is pattern and a string, u have to find if the string matches the pattern

Method 1: Recursion

Time:O(2^N)

bool solve(string pattern, string str, int n, int m)
    {
        if(n==0 && m==0)
        {
            return true;
        }
        
        if(n==0) //if pattern exhausted and string left
        {
            return false;
        }
        
        if(m==0) //if str exhausted all rem chars in tha pattern need to be *
        {
            for(int i=0;i<n;i++)
            {
                if(pattern[i]!='*')
                {
                    return false;
                }
            }
            return true;
        }
        
        
        
        if(pattern[n-1]==str[m-1] || pattern[n-1]=='?')
        {
            return solve(pattern,str,n-1,m-1);
        }
        else if(pattern[n-1]=='*') //* can be empty or a seq
        {
            return solve(pattern,str,n-1,m) || solve(pattern,str,n,m-1);
            //empty || seq
        }
        
        return false;
        
    }

    int wildCard(string pattern,string str)
    {
        
        int n=pattern.length();
        int m=str.length();
        
        return solve(pattern,str,n,m);
    }
    
    Method 2:
    
    Memoization:
    
    Time:O(M*N), Space:O(M*N)
    
    bool solve(string pattern, string str, int n, int m,vector<vector<int>>& dp)
    {
        if(n==0 && m==0)
        {
            return true;
        }
        
        if(n==0) //if pattern exhausted and string left
        {
            return false;
        }
        
        if(m==0) //if str exhausted all rem chars in tha pattern need to be *
        {
            for(int i=0;i<n;i++)
            {
                if(pattern[i]!='*')
                {
                    return false;
                }
            }
            return true;
        }
        
        if(dp[n][m]!=-1)
        {
            return dp[n][m];
        }
        
        if(pattern[n-1]==str[m-1] || pattern[n-1]=='?')
        {
            return dp[n][m]=solve(pattern,str,n-1,m-1,dp);
        }
        else if(pattern[n-1]=='*') //* can be empty or a seq
        {
            return dp[n][m]=solve(pattern,str,n-1,m,dp) || solve(pattern,str,n,m-1,dp);
            //empty || seq
        }
        
        return dp[n][m]=false;
        
    }

    int wildCard(string pattern,string str)
    {
        
        int n=pattern.length();
        int m=str.length();
        
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        
        return solve(pattern,str,n,m,dp);
    }
    
    Method 3: Top down
    
    Time:O(M*N), Space:O(M*N)
    
    int allStar(string pattern, int len)
    {
        for(int i=0;i<len;i++)
        {
            if(pattern[i]!='*')
            {
                return 0;
            }
        }
        return 1;
    }

    int wildCard(string pattern,string str)
    {
        int n=pattern.length();
        int m=str.length();
        
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        
        
        dp[0][0]=1; //if both 0
        
        //if pattern 0 and str>0 return false;
        
        for(int i=1;i<=m;i++)
        {
            dp[0][i]=0;
        }
        
        //if string 0 and pattern has to be *
        for(int i=1;i<=n;i++)
        {
            dp[i][0]=allStar(pattern,i);
        }
        
        //i ->pattern, j->string
        
        
        
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(pattern[i-1]==str[j-1] || pattern[i-1]=='?')
                {
                    dp[i][j]=dp[i-1][j-1];
                }
                else if(pattern[i-1]=='*')
                {
                    dp[i][j]=dp[i-1][j] || dp[i][j-1];
                    //match none or match 1,2,3,4..
                }
                else
                {
                    dp[i][j]=0;
                }
            }
        }
        
        
        return dp[n][m];
        
        
        
    }
    
