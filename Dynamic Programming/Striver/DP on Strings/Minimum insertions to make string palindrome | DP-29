https://takeuforward.org/data-structure/minimum-insertions-to-make-string-palindrome-dp-29/
https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/submissions/


No of inserstions/deletions to make a string pallindrome= n(length of the string) â€“ length of longest palindromic subsequence.
length of longest palindromic subsequence=LCS(S,reverse(s))

Method 1: Top down

Time:O(N^2), Space:O(N^2)

 int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        
        return b;
    }
    
    int minInsertions(string s) {
        
        
        int n=s.length();
        string s2=s;
        reverse(s2.begin(),s2.end());
        
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(s[i-1]==s2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        
        return n-dp[n][n];
        
        
    }
    
    Method 2: Space optimised top down
    
    Time:O(N^2), Space:O(N)
    
    int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        
        return b;
    }
    
    int minInsertions(string s) {
        
        
        int n=s.length();
        string s2=s;
        reverse(s2.begin(),s2.end());
        
        vector<vector<int>> dp(2,vector<int>(n+1,0));
        
        int row=0;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                row=i&1;
                
                if(s[i-1]==s2[j-1])
                {
                    dp[row][j]=1+dp[1-row][j-1];
                }
                else
                {
                    dp[row][j]=max(dp[1-row][j],dp[row][j-1]);
                }
            }
        }
        
        return n-dp[row][n];
        
        
    }
