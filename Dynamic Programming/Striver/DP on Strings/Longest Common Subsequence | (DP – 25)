https://leetcode.com/problems/longest-common-subsequence/submissions/
https://takeuforward.org/data-structure/longest-common-subsequence-dp-25/

Brute force Time:O(N*2^N), 2^n to find no of subseq and n to compare if they are equal.

Method 1: Recursion

Time:O(2^n)

int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    int solve(string text1, string text2, int n, int m)
    {
        if(n==0 || m==0)
        {
            return 0;
        }
        
        if(text1[n-1]==text2[m-1])
        {
            return 1+solve(text1,text2,n-1,m-1);
        }
        else
        {
            return max(solve(text1,text2,n-1,m),solve(text1,text2,n,m-1));
        }
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        
        int n=text1.length();
        int m=text2.length();
        
        return solve(text1,text2,n,m);
        
    }
    
    
    Method 2: Memoization
    
    Time:O(M*N)
    
    int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    int solve(string text1, string text2, int n, int m,vector<vector<int>>& dp)
    {
        if(n==0 || m==0)
        {
            return 0;
        }
        
        if(dp[n][m]!=-1)
        {
            return dp[n][m];
        }
        
        if(text1[n-1]==text2[m-1])
        {
            return dp[n][m]= 1+solve(text1,text2,n-1,m-1,dp);
        }
        else
        {
            return dp[n][m]= max(solve(text1,text2,n-1,m,dp),solve(text1,text2,n,m-1,dp));
        }
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        
        int n=text1.length();
        int m=text2.length();
        
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        
        return solve(text1,text2,n,m,dp);
        
    }


Method 3: Top down

Time:O(M*N), Space:O(M*N)

int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    
    int longestCommonSubsequence(string text1, string text2) {
        
        int n=text1.length();
        int m=text2.length();
        
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(text1[i-1]==text2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        
        return dp[n][m];
        
        
    }
    
    Method 4: Space optimised top down
    
    Time:O(M*N), Space:O(M)
    
     int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    
    int longestCommonSubsequence(string text1, string text2) {
        
        int n=text1.length();
        int m=text2.length();
        
        vector<vector<int>> dp(2,vector<int>(m+1,0));
        int row=0;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                
                row=i & 1;
                
                if(text1[i-1]==text2[j-1])
                {
                    dp[row][j]=1+ dp[1-row][j-1];
                }
                else
                {
                    dp[row][j]=max(dp[1-row][j],dp[row][j-1]);
                }
                
                
                
            }
        }
        
        return dp[row][m];
        
        
    }
