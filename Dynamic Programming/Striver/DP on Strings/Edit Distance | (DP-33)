https://leetcode.com/problems/edit-distance/submissions/
https://takeuforward.org/data-structure/edit-distance-dp-33/

Method 1: Recursion

Time:O(3^M)

 int min(int a, int b, int c)
    {
        if(a<=b && a<=c)
        {
            return a;
        }
        else if(b<=a && b<=c)
        {
            return b;
        }
        return c;
    }
    
    
    //s1->s2
    int solve(string s1, string s2, int n, int m)
    {
        if(n==0)
        {
            return m;
        }
        if(m==0)
        {
            return n;
        }
        
        if(s1[n-1]==s2[m-1])
        {
            return solve(s1,s2,n-1,m-1);
        }
        else
        {
            return 1+min(solve(s1,s2,n,m-1),solve(s1,s2,n-1,m),solve(s1,s2,n-1,m-1));
        }
        
        
    }
    
    
    int minDistance(string word1, string word2) {
        
        int n=word1.length();
        int m=word2.length();
        
        return solve(word1,word2,n,m);
        
    }
    
    method 2: Memoization
    
    Time:O(M*N), Space:O(M*N)+O(M+N) Recursion stack
    
     int min(int a, int b, int c)
    {
        if(a<=b && a<=c)
        {
            return a;
        }
        else if(b<=a && b<=c)
        {
            return b;
        }
        return c;
    }
    
    
    //s1->s2
    int solve(string s1, string s2, int n, int m,vector<vector<int>>& dp)
    {
        if(n==0)
        {
            return m;
        }
        if(m==0)
        {
            return n;
        }
        
        if(dp[n][m]!=-1)
        {
            return dp[n][m];
        }
        
        if(s1[n-1]==s2[m-1])
        {
            return dp[n][m]=solve(s1,s2,n-1,m-1,dp);
        }
        else
        {
            return dp[n][m]=1+min(solve(s1,s2,n,m-1,dp),solve(s1,s2,n-1,m,dp),solve(s1,s2,n-1,m-1,dp));
        }
        
        
    }
    
    
    int minDistance(string word1, string word2) {
        
        int n=word1.length();
        int m=word2.length();
        
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        
        return solve(word1,word2,n,m,dp);
        
    }
    
    Method 3: Top down
    
    Time:O(M*N), Space:O(M*N)
    
     int min(int a, int b, int c)
    {
        if(a<=b && a<=c)
        {
            return a;
        }
        else if(b<=a && b<=c)
        {
            return b;
        }
        return c;
    }
    
    
    //s1->s2
    
    
    
    int minDistance(string word1, string word2) {
        
        int n=word1.length();
        int m=word2.length();
        
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        
        for(int i=1;i<=n;i++)
        {
            dp[i][0]=i;
        }
        for(int i=1;i<=m;i++)
        {
            dp[0][i]=i;
        }
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(word1[i-1]==word2[j-1])
                {
                    dp[i][j]=dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=1+min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1]);
                }
            }
        }
        
        return dp[n][m];
        
        
        
       
        
    }
    
    Method 4: Top down space optimised
    
    Time:O(M*N), Space:O(M)
    
     int min(int a, int b, int c)
    {
        if(a<=b && a<=c)
        {
            return a;
        }
        else if(b<=a && b<=c)
        {
            return b;
        }
        return c;
    }
    
    
    //s1->s2
    
    
    
    int minDistance(string word1, string word2) {
        
        int n=word1.length();
        int m=word2.length();
        
        vector<vector<int>> dp(2,vector<int>(m+1,0));
        
        for(int i=1;i<=m;i++)
        {
            dp[0][i]=i;
        }
        int row=0;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=m;j++)
            {
                row=i&1;
                
                if(j==0)
                {
                    dp[row][j]=i;
                    continue;
                }
                
                if(word1[i-1]==word2[j-1])
                {
                    dp[row][j]=dp[1-row][j-1];
                }
                else
                {
                    dp[row][j]=1+min(dp[row][j-1],dp[1-row][j],dp[1-row][j-1]);
                }
            }
        }
        
        return dp[row][m];
        
        
        
       
        
    }
