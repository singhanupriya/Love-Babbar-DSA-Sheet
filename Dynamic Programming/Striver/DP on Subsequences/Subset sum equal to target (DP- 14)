https://takeuforward.org/data-structure/subset-sum-equal-to-target-dp-14/

Method 1: Recursive

Time:O(2^N)

int solve(vector<int>arr, int n, int sum)
    {
        if((n==0 && sum>0 ) || sum<0)
        {
            return 0;
        }
        
        if(sum==0)
        {
            return 1;
        }
        
        int notTake=solve(arr,n-1,sum);
        int take=0;
        if(arr[n-1]<=sum)
        {
            take=solve(arr,n-1,sum-arr[n-1]);
        }
        
        return take || notTake;
    }


    bool isSubsetSum(vector<int>arr, int sum){
        // code here
        
        int ans=solve(arr, arr.size(),sum);
        if(ans ==1)
        {
            return true;
        }
        
        return false;
        
    }
    
    Method 2:
    
    Memoization -> overlapping subproblems
    
    Time:O(M*N)
    
    int solve(vector<int>arr, int n, int sum,vector<vector<int>>& dp)
    {
        if((n==0 && sum>0 ) || sum<0)
        {
            return 0;
        }
        
        if(sum==0)
        {
            return 1;
        }
        
        if(dp[n][sum]!=-1)
        {
            return dp[n][sum];
        }
        
        int notTake=solve(arr,n-1,sum,dp);
        int take=0;
        if(arr[n-1]<=sum)
        {
            take=solve(arr,n-1,sum-arr[n-1],dp);
        }
        
        return dp[n][sum]=take || notTake;
    }


    bool isSubsetSum(vector<int>arr, int sum){
        // code here
        
        int n=arr.size();
        vector<vector<int>> dp(n+1,vector<int>(sum+1,-1));
        int ans=solve(arr, arr.size(),sum,dp);
        if(ans ==1)
        {
            return true;
        }
        
        return false;
        
    }
    
    Method 3:
    
    Top down
    
    Time:O(M*N), Space:O(M*N)
    
     bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        
        int n=arr.size();
        
        vector<vector<int>> dp(n+1,vector<int>(sum+1,0));
        
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                if(j==0)
                {
                    dp[i][j]=1;
                    continue;
                
                    
                }
                
                int notTake=0;
                if(i>0)
                {
                    notTake=dp[i-1][j];
                }
                
                
                int take=0;
                
                if(i>0 && arr[i-1]<=j)
                {
                    take=dp[i-1][j-arr[i-1]];
                }
                
                dp[i][j]=take || notTake;
                
                
                
                
                
            }
        }
        
        return dp[n][sum];
        
        
    }
    
    
