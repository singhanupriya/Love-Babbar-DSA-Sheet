https://takeuforward.org/data-structure/count-subsets-with-sum-k-dp-17/


Edge case: https://www.youtube.com/watch?v=zoilQD1kYSg

Time:O(N*M), Space:O(M*N)

Take + notTake

int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    int n=num.size();
    
    vector<vector<int>> dp(n+1,vector<int>(tar+1,0));
    
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=tar;j++)
        {
            if(j==0)
            {
                dp[i][j]=1;   //edge case, if in the array u have 0s {0,0} and sum=0 this will return 1 while no of subsets with sum 0 will be 0,0,00,{}=4.
                continue;   //workaround no of 0's=n , final ans* 2^n
            }
            
            int take=0,notTake=0;
            
            if(i>0)
            {
                notTake=dp[i-1][j];
            }
            
            if(i>0 && num[i-1]<=j)
            {
                take=dp[i-1][j-num[i-1]];
            }
            
            dp[i][j]=take + notTake;
            
            
        }
    }
    
    return dp[n][tar];
    
    
}
