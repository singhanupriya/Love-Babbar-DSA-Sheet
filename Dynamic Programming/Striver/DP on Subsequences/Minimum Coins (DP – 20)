https://takeuforward.org/data-structure/minimum-coins-dp-20/


Knapsack

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{

	public:
	
	int solve(int sum, int n, int num[])
    {
        if(sum==0)
        {
            return 0;
        }
        
        if(sum<0 || n==0)
        {
            return 1000000009;
        }
        
        if(num[n-1]<=sum)
        {
            return min(1+ solve(sum-num[n-1],n,num), solve(sum,n-1,num));
        }
        else
        {
            return solve(sum,n-1,num);
        }
    }

	
	int minCoins(int coins[], int M, int V) 
	{ 
	    
	    int ans=solve(V,M,coins);
	    
	    if(ans>=1000000009)
	    {
	        return -1;
	    }
	    
	    return ans;
	    
	} 
	  
};

//{ Driver Code Starts.
int main() 
{
   
   
   	int t;
    cin >> t;
    while (t--)
    {
        int v, m;
        cin >> v >> m;

        int coins[m];
        for(int i = 0; i < m; i++)
        	cin >> coins[i];

      
	    Solution ob;
	    cout << ob.minCoins(coins, m, v) << "\n";
	     
    }
    return 0;
}

// } Driver Code Ends


Method 1: Recursion

Time:n^amount

  int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    int solve(vector<int>& coins, int n, int amount)
    {
        if(n==0 || amount==0)
        {
            return 0;
        }
        
        int ans=1000000009;
        
        for(int i=0;i<n;i++)
        {
            if(coins[i]<=amount)
            {
                int temp=1+solve(coins,n,amount-coins[i]);
                ans=min(ans,temp);
            }
        }
        
        return ans;
        
    }
    
    int coinChange(vector<int>& coins, int amount) {
        
        int n=coins.size();
        int ans= solve(coins,n,amount);
        
        if(ans>=1000000009)
        {
            return -1;
        }
        
        return ans;
        
    }
    
    Method 2: Memoization
    
    Time:O(N*amount)
    
     int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    int solve(vector<int>& coins, int n, int amount,vector<vector<int>>& dp)
    {
        if(n==0 || amount==0)
        {
            return 0;
        }
        
        if(dp[n][amount]!=-1)
        {
            return dp[n][amount];
        }
        
        int ans=1000000009;
        
        for(int i=0;i<n;i++)
        {
            if(coins[i]<=amount)
            {
                int temp=1+solve(coins,n,amount-coins[i],dp);
                ans=min(ans,temp);
            }
        }
        
        return dp[n][amount]=ans;
        
    }
    
    int coinChange(vector<int>& coins, int amount) {
        
        int n=coins.size();
        
        vector<vector<int>> dp(n+1,vector<int>(amount+1,-1));
        
        int ans= solve(coins,n,amount,dp);
        
        if(ans>=1000000009)
        {
            return -1;
        }
        
        return ans;
        
    }
};


Method 3: Top down

Time:O(M*N), Space:O(amount)

class Solution {
public:
    
    int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    
    int coinChange(vector<int>& coins, int amount) {
        
        int n=coins.size();
        
        vector<int> dp(amount+1,1000000009);
        
        dp[0]=0;
        
        
        
        for(int i=1;i<=amount;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(coins[j]<=i)
                {
                    dp[i]=min(dp[i],1+dp[i-coins[j]]);
                }
            }
        }
        
        
        if(dp[amount]>=1000000009)
        {
            return -1;
        }
        
        return dp[amount];
        
    }
};

    
