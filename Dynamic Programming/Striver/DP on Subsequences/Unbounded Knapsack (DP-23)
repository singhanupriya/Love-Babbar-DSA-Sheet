https://takeuforward.org/data-structure/unbounded-knapsack-dp-23/

Method 1: Recursion

Time:O(2^n)

int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}
int solve(int n, int w, vector<int> &profit, vector<int> &weight)
{
    if(n==0 || w==0)
    {
        return 0;  //no profit
    }
    
    if(weight[n-1]<=w)
    {
        return max(profit[n-1]+ solve(n,w-weight[n-1],profit,weight),solve(n-1,w,profit,weight));
    }
    else
    {
        return solve(n-1,w,profit,weight);
    }
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    
    return solve(n,w,profit,weight);
}



Method 2: Memoization

Time:O(M*N), Space:O(M*N)

int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}
int solve(int n, int w, vector<int> &profit, vector<int> &weight,vector<vector<int>>& dp)
{
    if(n==0 || w==0)
    {
        return 0;  //no profit
    }
    if(dp[n][w]!=-1)
    {
        return dp[n][w];
    }
    
    if(weight[n-1]<=w)
    {
        return dp[n][w]=max(profit[n-1]+ solve(n,w-weight[n-1],profit,weight,dp),solve(n-1,w,profit,weight,dp));
    }
    else
    {
        return dp[n][w]=solve(n-1,w,profit,weight,dp);
    }
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    vector<vector<int>> dp(n+1,vector<int>(w+1,-1));
    return solve(n,w,profit,weight,dp);
}

Method 3: Top Down

Time:O(M*N), Space:O(M*N)

int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}


int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    vector<vector<int>> dp(n+1,vector<int>(w+1,0));
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=w;j++)
        {
            if(weight[i-1]<=j)
            {
                dp[i][j]=max(profit[i-1]+dp[i][j-weight[i-1]],dp[i-1][j]);
            }
            else
            {
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    
    return dp[n][w];
    
    
}


