

Unbounded knapsack

M1- Recursion

base- if (w==0) return 0, if(w<0 || n<=0) return INT_MAX; //if w<0 or w left but no element left -not possible
if n<W, return min(cost[n-1]+solve(cost,n,w-n), solve(cost,n-1,w)  //include + not included
else return solve(cost,n-1,w) //not included

4+INT_MAX--> overflow, gives a neg value hence min(4+INT_MAX(neg),INT_MAX(postive)) so if ur final returns a neg value return -1 means not possible

Time:exponential --> many overlapping so dp



/
#include <iostream>
#include<vector>
#include<climits>

using namespace std;

int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    int solve(int cost[], int N, int W)
    {
        if(W==0)
        {
            return 0;
        }
        
        if(W<0 || N<=0)
        {
            
            return INT_MAX; //not possible
        }
        
        if(cost[N-1]!=-1 && N<=W)
        {
            
            return min(cost[N-1]+solve(cost,N,W-N),solve(cost,N-1,W));
        }
        else
        {
            
            return solve(cost,N-1,W);
        }
    }
		


	int minimumCost(int cost[], int N, int W) 
	{ 
        // Your code goes here
        
        int x=solve(cost,N,W);
        if(x<0)
        {
            return -1;
        }
        
        return x;
        
	} 

int main()
{
    //cout<<"Hello World";
     int W = 5, cost[] = {-1, -1, 4, 5, -1};
     int N=5;
     
     cout<<minimumCost(cost,N,W);

    return 0;
}

memoisation

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>
#include<climits>

using namespace std;

int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    int solve(int cost[], int N, int W,vector<vector<int>>& dp)
    {
        
        if(dp[N][W]!=-1)
        {
            return dp[N][W];
        }
        
        if(W==0)
        {
            return 0;
        }
        
        if(W<0 || N<=0)
        {
            
            return INT_MAX; //not possible
        }
        
        if(cost[N-1]!=-1 && N<=W)
        {
            
            return dp[N][W]= min(cost[N-1]+solve(cost,N,W-N,dp),solve(cost,N-1,W,dp));
        }
        else
        {
            
            return dp[N][W]=solve(cost,N-1,W,dp);
        }
    }
		


	int minimumCost(int cost[], int N, int W) 
	{ 
        // Your code goes here
        
        vector<vector<int>> dp(N+1, vector<int>(W+1, -1));
        
        
        
        int x=solve(cost,N,W,dp);
        if(x<0)
        {
            return -1;
        }
        
        return x;
        
	} 

int main()
{
    //cout<<"Hello World";
     int W = 5, cost[] = {1, 10, 4, 50, 100};
     int N=5;
     
     cout<<minimumCost(cost,N,W);

    return 0;
}

Top down

Time:O(N*W), Space:O(N*W0

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>
#include<climits>

using namespace std;

int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    


	int minimumCost(int cost[], int N, int W) 
	{ 
        // Your code goes here
        
        vector<vector<int>> dp(N+1, vector<int>(W+1, -1));
        dp[0][0]=0;
        
        for(int i=1;i<=N;i++)
        {
            dp[i][0]=0;  //if no W
        }
        
        for(int i=1;i<=W;i++)
        {
            dp[0][i]=INT_MAX;
        }
        
        for(int i=1;i<=N;i++)
        {
            for(int j=1;j<=W;j++)
            {
                if(cost[i-1]!=-1 && i<=j)
                {
                    dp[i][j]=min(cost[i-1]+dp[i][j-i],dp[i-1][j]);
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        
        if(dp[N][W]<0)
        {
            return -1;
        }
        
        return dp[N][W];
        
	} 

int main()
{
    //cout<<"Hello World";
     int W = 5, cost[] = {20, 10, 4, 50, 100};
     int N=5;
     
     cout<<minimumCost(cost,N,W);

    return 0;
}
