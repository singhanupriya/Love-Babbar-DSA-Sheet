https://www.youtube.com/watch?v=H1qjjkm3P3c

No of possible BSTs with n nodes= calatan(n)

Catalan number

Rec-
Time:exp

int numTrees(int n) 
    {
        // Your code here
        
        if(n==0 || n==1)
        {
            return 1;
        }
        
        int res=0;
        for(int i=0;i<n;i++)
        {
            res=res+(numTrees(i)* numTrees(n-1-i));
            
        }
        return res;
        
    }
};

Memoisation-

// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends

class Solution
{
    public:
    //Function to return the total number of possible unique BST. 
    
    int solve(int n, vector<int>& dp)
    {
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        if(n==0 || n==1)
        {
            return 1;
        }
        
        long long res=0;
        for(int i=0;i<n;i++)
        {
            res=(res+(solve(i,dp)*solve(n-1-i,dp))%1000000007)%1000000007;
        }
        
        return dp[n]=res;
    }
    
    int numTrees(int n) 
    {
        // Your code here
        
        vector<int> dp(n+1,-1);
        dp[0]=1;
        dp[1]=1;
        
        return solve(n,dp);
        
    }
};

// { Driver Code Starts.
#define mod (int)(1e9+7)
int main(){
    
    //taking total testcases
    int t;
    cin>>t;
    while(t--){
        
        //taking total number of elements
        int n;
        cin>>n;
        Solution ob;
        //calling function numTrees()
        cout<<ob.numTrees(n)<<"\n";
    }
}	  // } Driver Code Ends


M3- Top dpwn   

""" Need to check placement of modulo
Time:O(N^2), Space:O(n)

int numTrees(int n) 
    {
        // Your code here
        
        vector<int> dp(n+1,-1);
        dp[0]=1;
        dp[1]=1;
        
        for(int i=2;i<=n;i++)
        {
            dp[i]=0;
            for(int j=0;j<i;j++)
            {
                dp[i]=(dp[i]+(dp[j]*dp[i-1-j])%1000000007)%1000000007;
            }
        }
        return dp[n];
        
    }
};
