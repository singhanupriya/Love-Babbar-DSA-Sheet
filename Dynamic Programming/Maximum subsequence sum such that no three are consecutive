https://www.geeksforgeeks.org/maximum-subsequence-sum-such-that-no-three-are-consecutive/

2 cons elements u can have
1. U can't select 3 cons numbers from the array for the sub so u can either exclude index i or i-1 or i-2.
2. Exlude i dp[i]=sum[i-1]
3. Exclude i-1 dp[i]=sum[i-2]+arr[i]
4. Exclude i-2 dp[i]=sum[i-3]+arr[i-1]+arr[i], dp[0]=arr[0], dp[1]=arr[0]+arr[1], dp[2]=max(arr[0]+arr[1] {exlude index 2} , arr[0]+arr[2] {exclude index 1} , arr[1]+arr[2] {exclude index 0} 

Time:O(N), Space:O(n)


/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>

using namespace std;

int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}

int max(int a, int b, int c)
{
    if(a>=b && a>=c)
    {
        return a;
    }
    else if(b>=a && b>=c)
    {
        return b;
    }
    return c;
}

int solve(int arr[], int n)
{
    vector<int> dp(n,0);
    int ans=arr[0];
    dp[0]=arr[0];
    dp[1]=arr[0]+arr[1];
    
    dp[2]=max(dp[1],dp[0]+arr[2],arr[1]+arr[2]);
    ans=max(dp[0],dp[1],dp[2]);
    
    for(int i=3;i<n;i++)
    {
        dp[i]=max(dp[i-1],dp[i-2]+arr[i],dp[i-3]+arr[i-1]+arr[i]);
        //exclude ith element, (i-1)th, (i-2)
        
        ans=max(ans,dp[i]);
        
        
    }
    return ans;
    
    
}






int main()
{
    int arr[] = {100, 1000, 100, 1000, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout<<solve(arr,n);

    return 0;
}
