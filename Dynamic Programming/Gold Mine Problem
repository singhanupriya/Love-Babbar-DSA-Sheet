
Time:O(M*N),Space:O(M*N)

DP:

int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }

    int maxGold(int n, int m, vector<vector<int>> mat)
    {
        // code here
        
        vector<vector<int>> dp(n,vector<int>(m,0));
        
        for(int i=0;i<n;i++)
        {
            dp[i][0]=mat[i][0];
        }
        
        for(int j=1;j<m;j++)
        {
            for(int i=0;i<n;i++)
            {
                int right=0,rightUp=0,rightDown=0;
                
                //right
                if(j-1 >=0 && j-1<m)
                {
                    right=mat[i][j]+dp[i][j-1];
                }
                
                //rightUp
                if(i+1>=0 && i+1<n && j-1>=0 && j-1<m)
                {
                    rightUp=mat[i][j]+dp[i+1][j-1];
                }
                
                //rightDown
                if(i-1>=0 && i-1<n && j-1>=0 && j-1<m)
                {
                    rightDown=mat[i][j]+dp[i-1][j-1];
                }
                
                dp[i][j]=max(dp[i][j],max(right,max(rightUp,rightDown)));
                
                

            }
        }
        
        
        int ans=INT_MIN;
        
        for(int i=0;i<n;i++)
        {
            ans=max(ans,dp[i][m-1]);
        }
        
        return ans;
        
        
    }


Backtracking:

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>
#include<climits>

using namespace std;



    void solve(vector<vector<int>> M, int i, int j, int m, int n, int dirx[], int diry[], int temp, int& ans)
    {
        
        if(j==n-1)
        {
            ans=max(ans,temp+M[i][j]);
            cout<<i<<" "<<j<<" "<<temp<<"temp  ans "<<ans<<"\n";
            
        }
        
        for(int x=0;x<3;x++)
        {
            if(i+dirx[x]>=0 && i+dirx[x]<m && j+diry[x]>=0 && j+diry[x]<n)
            {
                temp=temp+M[i][j];
                cout<<i<<" "<<j<<" "<<temp<<"temp  "<<i+dirx[x]<<"new  "<<j+diry[x]<<"\n";
                solve(M, i+dirx[x], j+diry[x],m,n,dirx,diry,temp,ans);
                temp=temp-M[i][j];
            }
        }
        
        
    }
    
    int maxGold(int n, int m, vector<vector<int>> M)
    {
        // code here
        
        int dirx[]={-1,0,1};
        int diry[]={1,1,1};
        
        
        int ans=INT_MIN;
        int startx;
        
        
        for(startx=0;startx<m;startx++)
        {
            solve(M,startx,0,m,n,dirx,diry,0,ans);
        }
        
        return ans;
        
        
        
        
    }

int main()
{
    
    vector<vector<int>> M={{10, 33, 13, 15},
                  {22, 21, 04, 1},
                  {5, 0, 2, 3},
                  {0, 6, 14, 2}};
    
    cout<<maxGold(4,4,M);

    return 0;
}

For DP- we need smaller sub problems, here small problem is if u are at last col much gold u can collect then if u are at second last col how much max gold u can collect
this was move from last col to first col, and store the max gold that can be collected from a point moving towards last col in dp. ans-> max of all rows in first col.

Time:O(m*n), Space:O(M*n)

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>
#include<climits>

using namespace std;

int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    int maxGold(int n, int m, vector<vector<int>> M)
    {
        // code here n-row, m-col
        
        vector<vector<int>> dp(n,vector<int>(m,0));
        
        for(int i=0;i<n;i++)
        {
            dp[i][m-1]=M[i][m-1];
        }
        
        int diri[]={1,1,1};
        int dirj[]={-1,0,1};
        
        for(int i=m-2;i>=0;i--)  //col
        {
            for(int j=0;j<n;j++)   //row
            {
                for(int x=0;x<3;x++)
                {
                    if(i+diri[x]>=0 && i+diri[x]<m && j+dirj[x]>=0 && j+dirj[x]<n)
                    {
                        dp[j][i]=max(dp[j][i],M[j][i]+dp[j+dirj[x]][i+diri[x]]);
                    }
                }
            }
        }
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                cout<<dp[i][j]<<" ";
            }
            cout<<"\n";
        }
        
        
        int ans=INT_MIN;
        for(int i=0;i<n;i++)
        {
            ans=max(ans,dp[i][0]);
        }
        
        return ans;
        
    }


int main()
{
    vector<vector<int>> mat = {{10, 33, 13, 15},
                  {22, 21, 04, 1},
                  {5, 0, 2, 3},
                  {0, 6, 14, 2}};
                  
    cout<<maxGold(4,4,mat);

    return 0;
}
