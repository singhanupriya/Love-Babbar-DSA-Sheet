https://www.geeksforgeeks.org/minimum-removals-array-make-max-min-k/

1. U have to find min and max of array and make sure max-min<=k.
2. Sort the array first else u have to iterate every time to find min or max.
3. If max-min<=k return 0 moves
    else u can either remove min or max return 1[1 move as one element removed] + min(solve(arr,i+1,j,k-- min remved ),solve(arr,i,j-1,k-- max remved)
    
   i=0 and j=n-1


int solve(int i, int j, int k, vector<int>& a,vector<vector<int>>& dp)
    {
        if(i>=j)
        {
            return 0; //if one element, diff=0, no removal
        }
        
        if(a[j]-a[i]<=k)
        {
            return 0;
        }
        
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        
        int removeStart=solve(i+1,j,k,a,dp);
        int removeEnd=solve(i,j-1,k,a,dp);
        
        return dp[i][j]=1+min(removeStart,removeEnd);
    }
    
        
    
    int removals(vector<int>& a, int k){
        //Code here
        
        sort(a.begin(),a.end());
        int n=a.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        
        
        return solve(0,n-1,k,a,dp);
        
    }
};



Method 2:

Time:O(N^2), Space:O(N^2)

int removals(vector<int>& a, int k){
        //Code here
        
        sort(a.begin(),a.end());
        int n=a.size();
        
        //since here, i and j are on the same string, we have to use len like in
        //pallindromic sustring
        
        //len goes from 0 to n
        
        //i,j ->index goes from 0 to n-1
        
        //i->startIndex,j->endINdex
        
        vector<vector<int>> dp(n,vector<int>(n,0));
        
        
        for(int i=0;i<n;i++)
        {
            dp[i][i]=0; //length 1 ans is 0 removals
        }
        
        for(int len=2;len<=n;len++)
        {
            for(int startIndex=0;startIndex<=n-len;startIndex++)
            {
                int endIndex=startIndex+len-1;
                
                if(a[endIndex]-a[startIndex]<=k)
                {
                    dp[startIndex][endIndex]=0;
                }
                else
                {
                    dp[startIndex][endIndex]=1 + min(dp[startIndex+1][endIndex],dp[startIndex][endIndex-1]);
                    
                }
                
                
            }
        }
        
        
        return dp[0][n-1];
        
    }


Method 3:

Time:O(n log n), Space:O(1)

1. sort the array, Take two pointers start and end denoting the start and end of the subarray, end=start+1.
2. traverse the array and find the len of longest substring wuch that end-start<=k, ans will be n-longest substring
3. If no such substring is found, all n-1 elements have to be removed so that one element is left and diff=0

int removals(vector<int>& a, int k){
        //Code here
        
        
        int n=a.size();
        
        sort(a.begin(),a.end());
        
        int startIndex=0;
        
        
        int len=INT_MIN; //len of longest substring with max-min diff <=k
        
        for(int endIndex=startIndex+1;endIndex<n && startIndex<n;endIndex++)
        {
            
            if(a[endIndex]-a[startIndex]<=k)
            {
                len=max(len,endIndex-startIndex+1);
            }
            else
            {
                startIndex++; //everytime u do start++, end will be start+1,
                //basically checking all substrings
            }
            
            
        }
        
        //if len==INT_min, means no subarray found, so only one element should be left in the attay
        //so that the diff is 0
        
        if(len==INT_MIN)
        {
            return n-1;
        }
        
        return n-len;
        
    }
