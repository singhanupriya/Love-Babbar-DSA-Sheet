https://practice.geeksforgeeks.org/problems/palindromic-patitioning4845/1/#

MCM pattern i=0,j=n-1, k=i+1 to j , i to k-1 and k to j
Base case if i>=j || ispal(str,i,j) return 0; //no need to partition

temp= 1 + f(s,i,k-1) + f(s,k,j) // we did one partition

Time complexity- exponential something as each fn divides into two

Overlapping

public:
    int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    bool pal(string s, int i, int j)
    {
        int start=i;
        int end=j;
        
        while(start<end)
        {
            if(s[start]!=s[end])
            {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    
    int solve(string str, int i, int j)
    {
        if(i>j || i==j || pal(str,i,j))
        {
            return 0;
        }
        
        int ans=INT_MAX;
        for(int k=i+1;k<=j;k++)
        {
            int temp= 1 + solve(str,i,k-1) + solve(str,k,j);
            ans=min(ans,temp);
        }
        return ans;
    }
    
    int palindromicPartition(string str)
    {
        // code here
        int n=str.length();
        
        return solve(str,0,n-1);
    }
};

Memoisation-

public:
    int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    bool pal(string s, int i, int j)
    {
        int start=i;
        int end=j;
        
        while(start<end)
        {
            if(s[start]!=s[end])
            {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    
    int solve(string str, int i, int j, vector<vector<int>>& dp)
    {
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        
        
        if(i>j || i==j || pal(str,i,j))
        {
            return 0;
        }
        
        int ans=INT_MAX;
        for(int k=i+1;k<=j;k++)
        {
            int temp= 1 + solve(str,i,k-1,dp) + solve(str,k,j,dp);
            ans=min(ans,temp);
        }
        return dp[i][j]=ans;
    }
    
    int palindromicPartition(string str)
    {
        // code here
        int n=str.length();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        
        return solve(str,0,n-1,dp);
    }
};


Further optimisation-

class Solution{
public:
    int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    bool pal(string s, int i, int j)
    {
        int start=i;
        int end=j;
        
        while(start<end)
        {
            if(s[start]!=s[end])
            {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    
    int solve(string str, int i, int j, vector<vector<int>>& dp)
    {
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        
        
        if(i>j || i==j || pal(str,i,j))
        {
            return 0;
        }
        
        int ans=INT_MAX;
        for(int k=i+1;k<=j;k++)
        {
            int left;
            
            if(dp[i][k-1]==-1)
            {
                left=solve(str,i,k-1,dp);
            }
            else
            {
                left=dp[i][k-1];
            }
            
            int right;
            
            if(dp[k][j]==-1)
            {
                right=solve(str,k,j,dp);
            }
            else
            {
                right=dp[k][j];
            }
            
            int temp= 1 + left + right;
            ans=min(ans,temp);
        }
        return dp[i][j]=ans;
    }
    
    int palindromicPartition(string str)
    {
        // code here
        int n=str.length();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        
        return solve(str,0,n-1,dp);
    }
};


method 3:

Time:O(N^3), Space:O(N^2)

 bool isPallindrome(int i, int j, string str)
    {
        int start=i;
        int end=j;
        
        while(start<=end)
        {
            if(str[start]!=str[end])
            {
                return false;
            }
            start++;
            end--;
        }
        
        return true;
        
    }

   
    int palindromicPartition(string str)
    {
        // code here
        
        int n=str.length();
        
        vector<vector<int>> dp(n,vector<int>(n,INT_MAX));
        
        //as i and j are indexes on the same string we will have to length approach
        //like in LPS
        
        //len 1 is pall so no partition, base case in rec
        for(int i=0;i<n;i++)
        {
            dp[i][i]=0;
        }
        
        for(int len=2;len<=n;len++)
        {
            for(int start=0;start<=n-len;start++)
            {
                int end=start+len-1;
                
                if(isPallindrome(start,end,str))
                {
                    dp[start][end]=0;
                    continue;
                }
                
                int result=INT_MAX;
        
                for(int k=start+1;k<=end;k++)
                {
                    int temp=1 + dp[start][k-1] + dp[k][end];
                    result=min(result,temp);
                }
                
                dp[start][end]=result;
                        
                
                
            }
        }
        
        
        return dp[0][n-1];
        
    }
    
    
