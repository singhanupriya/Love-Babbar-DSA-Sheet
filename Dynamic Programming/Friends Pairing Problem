https://www.geeksforgeeks.org/friends-pairing-problem/

Method 1:

 int solve(int n, vector<int>& dp)
    {
        if(n<=1)
        {
            return 1;
        }
        
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        
        long single=solve(n-1,dp)%1000000007;
        long pair=(n-1)*solve(n-2,dp)%1000000007;
        
        return dp[n]=(single+pair)%1000000007;
    }

    int countFriendsPairings(int n) 
    { 
        // code here
        
        vector<int> dp(n+1,-1);
        solve(n,dp);
        
        
    }
    
    Time:O(2^N), everyone has 2 options
    
    
    Method 2:
    
    Time:O(n), Space:O(N)
    
    int countFriendsPairings(int n) 
    { 
        // code here
        
        vector<int> dp(n+1,0);
        
        dp[0]=1;
        dp[1]=1;
        
        for(int i=2;i<=n;i++)
        {
            dp[i]=(1LL*dp[i-1]%1000000007+(1LL*(i-1)*dp[i-2])%1000000007)%1000000007;
        }
        return dp[n];
    }
    
    Method 3:
    
    Time:o(n), Space:O(1)
    
    int countFriendsPairings(int n) 
    { 
        // code here
        
        if(n<=1)
        {
            return 1;
        }
        
        int first=1; //n-2
        int second=1; //n-1
        
        for(int i=2;i<=n;i++)
        {
            int third =(1LL*second%1000000007+(1LL*(i-1)*first)%1000000007)%1000000007;
            first=second;
            second=third;
        }
        return second;
    }
    
