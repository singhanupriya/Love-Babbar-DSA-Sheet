

nPr=n!/(n-r)!



1
1 1
1 2 2
1 3 6 6 
1 4 12 24 24
Obs- nPr=(n-1)Pr + r*(n-1)P(r-1)

M1- Rec, overlappring so DP - memoisation and then top down

Time:O(N*r), Space:O(N*r)

int min(int a,int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    int nPr(int n, int r){
        // code here
        
        vector<vector<int>> dp(n+1,vector<int>(r+1,0));
        
        dp[0][0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=min(i,r);j++)
            {
                if(j==0)
                {
                    dp[i][j]=1;
                }
                else
                {
                    dp[i][j]=dp[i-1][j]+ j* dp[i-1][j-1];
                }
                cout<<dp[i][j]<<" ";
            }
            cout<<"\n";
        }
        
        return dp[n][r];
        
    }

int main()
{
    cout<<nPr(4,3 );

    return 0;
}



M2-

Create an array to store fact[N+1]

n-r<n, use loop to cal fact and store in arr, while cal n! we would have also cal (n-r)!

return fact(n)/fact(n-r)
Time:O(n), space:O(n)

 int nPr(int n, int r){
        // code here
        if(r>n)
        {
            return 0;
        }
        
        int arr[n+1];
        
        arr[0]=1;
        
        for(int i=1;i<=n;i++)
        {
            arr[i]=i*arr[i-1];
        }
        
        return arr[n]/arr[n-r];
        
        
    }
    
    
    
    M3
    
    nPr= n* (n-1)*(n-2)......*(n-(k+1))*(n-k)!/(n-k)!
    =n* (n-1)*(n-2)......*(n-(k+1))
    Time:O(N), Space:o(1)
    
    int nPr(int n, int r){
        // code here
        
        if(r>n)
        return 0;
        
        int prod=1;
        for(int i=0;i<=r-1;i++)
        {
            prod=prod*(n-i);
        }
        return prod;
        
        
    }
