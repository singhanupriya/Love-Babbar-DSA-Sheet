https://practice.geeksforgeeks.org/problems/unique-rows-in-boolean-matrix/1

1. Push all the rows in trie,
2. Traverse the trie
ORDER NOT MAINTAINED

Time:O(N*M), total no of elements in matrix


class TrieNode{
    public:
    TrieNode* child[2];
    bool EndOfWord;
    
    TrieNode()
    {
        EndOfWord=false;
        for(int i=0;i<2;i++)
        {
            child[i]=NULL;
        }
    }
};

void insert(TrieNode* root, int mat[MAX][MAX],int row, int col)
{
    TrieNode* p=root;
    for(int c=0;c<col;c++)
    {
        if(!p->child[mat[row][c]])
        {
            p->child[mat[row][c]]=new TrieNode();
        }
        p=p->child[mat[row][c]];
    }
    p->EndOfWord=true;
}

void traverse(TrieNode* root, vector<int> temp,vector<vector<int>>& ans)
{
    if(root)
    {
        for(int i=0;i<2;i++)
        {
            if(root->child[i])
            {
                temp.push_back(i);
                if(root->child[i]->EndOfWord)
                {
                    ans.push_back(temp);
                }
                else
                {
                    
                    traverse(root->child[i],temp,ans);
                    temp.pop_back();
                }
            }
        }
    }
}

vector<vector<int>> uniqueRow(int M[MAX][MAX],int row,int col)
{
//Your code here
    vector<vector<int>> ans;
    TrieNode* root=new TrieNode();
    for(int i=0;i<row;i++)
    {
        insert(root,M,i,col);
    }
    vector<int> temp;
    traverse(root,temp,ans);
    return ans;

}
