https://www.geeksforgeeks.org/trie-insert-and-search/



Time-
Insertion - O(length of word)
Searching- O(length of word)


#include <iostream>

using namespace std;

struct TrieNode{
    
    
    struct TrieNode* child[26];
    bool endOfWord;
    
};

struct TrieNode* createNode()
{
    struct TrieNode* node=new TrieNode;
    node->endOfWord=false;
    for(int i=0;i<26;i++)
    {
        node->child[i]=NULL;
    }
    
    return node;
}

void insert(struct TrieNode* root, string key)
{
    struct TrieNode* p=root;
    
    
    for(int i=0;i<key.length();i++)
    {
        if(!p->child[key[i]-'a'])
        {
            p->child[key[i]-'a']=createNode();
            
        }
        p=p->child[key[i]-'a'];
    }
    p->endOfWord=true;
}

bool search(struct TrieNode* root, string key)
{
    struct TrieNode* p=root;
    
    for(int i=0;i<key.length();i++)
    {
        if(!p->child[key[i]-'a'])
        {
            return false;
        }
        
        p=p->child[key[i]-'a'];
        
        
    }
    
    return p->endOfWord;
    
    
}



int main()
{
    
    struct TrieNode* root=createNode();
    
     string keys[] = {"the", "a", "there",
                    "answer", "any", "by",
                     "bye", "their" };
    int n = sizeof(keys)/sizeof(keys[0]);
    
    for(int i=0;i<n;i++)
    {
        insert(root,keys[i]);
    }
    
    search(root, "th")? cout << "Yes\n" :
                         cout << "No\n";
    search(root, "these")? cout << "Yes\n" :
                           cout << "No\n";
    search(root, "their")? cout << "Yes\n" :
                         cout << "No\n";
    search(root, "thaw")? cout << "Yes\n" :
                           cout << "No\n";

    return 0;
}
