https://www.youtube.com/watch?v=fpjfjNh658c&t=654s

1. Traverse array and insert into trie
2. Traverse array and travserse trie for every element picked from array and find prefix

Time:O(M*N), SPace:O(M*N), M-> no of words, N-> max length


class TrieNode{
    public:
    int frequency;
    TrieNode* children[26];
    
    TrieNode()
    {
        frequency=0;
        for(int i=0;i<26;i++)
        {
            children[i]=nullptr;
        }
    }
};



class Solution
{
    public:
    
    void insert(TrieNode* root, string word)
    {
        
        TrieNode* p=root;
        int len=word.length();
        
        for(int i=0;i<len;i++)
        {
            int index=word[i]-'a';
            if(p->children[index]==nullptr)
            {
                p->children[index]=new TrieNode();
            }
            p=p->children[index];
            p->frequency++;
        }
        
        
    }
    
    void findPrefix(TrieNode* root, string word, int indexArray, vector<string>& result)
    {
        TrieNode* p=root;
        int len=word.length();
        string temp="";
        
        for(int i=0;i<len;i++)
        {
            int index=word[i]-'a';
            temp=temp + word[i];
            p=p->children[index];
            if(p->frequency==1)
            {
                break;
            }
        }
        
        result[indexArray]=temp;
        
    }
    
    
    vector<string> findPrefixes(string arr[], int n)
    {
        //code 
        
        TrieNode* root=new TrieNode();
        
        for(int i=0;i<n;i++)
        {
            insert(root,arr[i]);
        }
        
        vector<string> result(n);
        
        for(int i=0;i<n;i++)
        {
            findPrefix(root,arr[i],i,result);
        }
        return result;
    }
    



1. Modify the trie to store child array and freq, keep incrementing freq, if that letter has occured.
2. Traverse the trie again, if the freq is 1 stop and add from root till here in the ans.
3. Keep doing

Time:O(NO OF WORDS* length of each word)
Space:O(NO OF WORDS* length of each word)



// C++ program to print all prefixes that
// uniquely represent words.
#include<bits/stdc++.h>
using namespace std;

#define MAX 256

// Maximum length of an input word
#define MAX_WORD_LEN 500

// Trie Node.
class TrieNode{
    
    public:
    int freq;
    TrieNode* children[256];
    
    TrieNode()
    {
        freq=1;
        for(int i=0;i<256;i++)
        {
            children[i]=NULL;
        }
    }
};


// Function to create a new trie node.
void insert(TrieNode* root, string key)
{
    TrieNode* p=root;
    for(int i=0;i<key.length();i++)
    {
        if(p->children[key[i]-'a'])
        {
            (p->children[key[i]-'a']->freq)++;
        }
        else
        {
            p->children[key[i]-'a']=new TrieNode();
        }
        p=p->children[key[i]-'a'];
    }
}

// This function prints unique prefix for every word stored
// in Trie. Prefixes one by one are stored in prefix[].
// 'ind' is current index of prefix[]



void util(TrieNode* root, vector<string>& ans,string temp)
{
    if (root != NULL)
		{
			for (int i = 0; i < 256; ++i)
			{
				if (root->children[i] != NULL)
				{
					if (root->children[i]->freq == 1)
					{
						// Display Result
						ans.push_back(temp + ((char)(i + 97)) );
						
					}
					else
					{
						// Find short prefix
						util(
                          root->children[i],ans, temp  +  
                          (((char)(i + 97))));
					}
				}
			}
		}
	}





    void findPrefixes(string arr[], int n)
    {
        //code here
        vector<string> ans;
        
        TrieNode* root=new TrieNode();
        for(int i=0;i<n;i++)
        {
            insert(root,arr[i]);
        }
        
        util(root,ans,"");
        for(int i=0;i<ans.size();i++)
        {
            cout<<ans[i]<<" ";
        }
        
    }
// Function to print all prefixes that uniquely
// represent all words in arr[0..n-1]


// Driver function.
int main()
{
	string arr[] = {"zebra", "dog", "duck", "dove"};
	int n = sizeof(arr)/sizeof(arr[0]);
	findPrefixes(arr, n);

	return 0;
}

