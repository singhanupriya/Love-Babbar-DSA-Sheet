https://www.ideserve.co.in/learn/anagram-grouping-in-a-sequence-using-trie

1. Create a trie with members - child, endofword and vector<string> index to group all same words.
2. Insert the sorted string in the trie once u reach end of word, add the orignal word to index vector, this was at the end all anagrams will be grouped together in index vectors at leaf nodes
3. Now traverse the trie again and push all index vectors into final vectors.
ORDER NOT MAINTAINED

Time:O(N*S*log(S)), S- length of each word, N-> no of words


class TrieNode{
    
    public:
    vector<pair<int,string>> indexMap;
    bool isLeaf;
    TrieNode* children[26];
    
    TrieNode()
    {
        isLeaf=false;
        for(int i=0;i<26;i++)
        {
            children[i]=nullptr;
        }
    }

    
};


class Solution{
  public:
  
  
    void insert(TrieNode* root, string key, int index, vector<string>& string_list)
    {
        int len=key.length();
        TrieNode* p=root;
        
        for(int i=0;i<len;i++)
        {
            int index=key[i]-'a';
            if(p->children[index]==nullptr)
            {
                p->children[index]=new TrieNode();
            }
            p=p->children[index];
        }
        p->isLeaf=true;
        p->indexMap.push_back(make_pair(index,string_list[index]));
        
        
    }
    
    void traverse(TrieNode* root, vector<vector<pair<int,string>>>& temp)
    {
        if(root)
        {
            for(int i=0;i<26;i++)
            {
                if(root->children[i])
                {
                    
                    if(root->children[i]->isLeaf)
                    {
                        temp.push_back(root->children[i]->indexMap);
                    }
                    else
                    {
                        traverse(root->children[i],temp);
                    }
                    
                }
                
                
            }
        }
    }
  
   static bool comp(vector<pair<int,string>>& a,vector<pair<int,string>>& b)
   {
       return a[0].first<b[0].first;
   }
  
    vector<vector<string> > Anagrams(vector<string>& string_list) {
        //code here
        
        TrieNode* root=new TrieNode();
        
        int len=string_list.size();
        
        for(int i=0;i<len;i++)
        {
            string temp=string_list[i];
            sort(temp.begin(),temp.end());
            insert(root,temp,i,string_list);
        }
        
        vector<vector<pair<int,string>>> temp;
        traverse(root,temp);
        sort(temp.begin(),temp.end(),comp);
        
        vector<vector<string>> result;
        
        for(int i=0;i<temp.size();i++)
        {
            vector<string> ans;
            for(int j=0;j<temp[i].size();j++)
            {
                ans.push_back(temp[i][j].second);
            }
            result.push_back(ans);
        }
        
        return result;
    }
