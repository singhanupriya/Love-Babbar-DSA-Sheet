https://leetcode.com/problems/next-permutation/submissions/

Time:O(N), Space:O(1)

According to Wikipedia, a man named Narayana Pandita presented the following simple algorithm to solve this problem in the 14th century.

    Find the largest index k such that nums[k] < nums[k + 1]. If no such index exists, just reverse nums and done.
    Find the largest index l > k such that nums[k] < nums[l].
    Swap nums[k] and nums[l].
    Reverse the sub-array nums[k + 1:].



class Solution {
public:
    
    
    
    void swap(int& a, int&b)
    {
        int temp=a;
        a=b;
        b=temp;
    }
    
    void nextPermutation(vector<int>& nums) {
        
        int n=nums.size();
        int index1;
        
        for(int i=n-2;i>=0;i--)
        {
            if(nums[i]<nums[i+1])
            {
                index1=i;
                break;
            }
        }
        
        if(index1<0)
        {
            reverse(nums.begin(),nums.end());
        }
        else
        {
            
            int index2;
            for(int i=n-1;i>index1;i--)
            {
                if(nums[i]>nums[index1])
                {
                    index2=i;
                    break;
                }
            }

            swap(nums[index1],nums[index2]);

            reverse(nums.begin()+index1+1,nums.end());
            
        }
        
        
        
        
    }
};
