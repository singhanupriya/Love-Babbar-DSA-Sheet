https://www.youtube.com/watch?v=dYfM6J1y0mU

M1-INsertion sort/ any sorting algo


M2-

1. Any number is atmost k away from its correct position.
2. Build a min-heap of size k+1, min of it will be the first element of sorted array.
3. keep popping out the first element

Time:O(k+(n-k)logk)
Space:O(K)


void heapify(int arr[], int i, int n)
    {
        int smallest=i;
        int left=2*i+1;
        int right=2*i+2;
        
        if(left<n && arr[left]<arr[smallest])
        {
            smallest=left;
        }
        
        if(right<n && arr[right]<arr[smallest])
        {
            smallest=right;
        }
        
        if(smallest!=i)
        {
            swap(arr[smallest],arr[i]);
            heapify(arr,smallest,n);
        }
    }
    
    vector <int> nearlySorted(int arr[], int n, int k){
        // Your code here
        
        vector<int> result;
        
        //min heap of k+1 elements
        int start=(k+1)/2;
        
        for(int i=start;i>=0;i--)
        {
            heapify(arr,i,k+1);
        }
        
        for(int i=k+1;i<n;i++)
        {
            result.push_back(arr[0]);
            swap(arr[0],arr[i]);
            heapify(arr,0,k+1);
        }
        
        for(int i=0;i<k;i++)
        {
            result.push_back(arr[0]);
            swap(arr[0],arr[k-i]);
            heapify(arr,0,k-i);
        }
        
        result.push_back(arr[0]);
        return result;
        
        
    }
