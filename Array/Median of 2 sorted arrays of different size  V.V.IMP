https://www.youtube.com/watch?v=NTop3VTjmxk&t=1547s

M1- Keep a count of elements.

Time:O(M+N), Space:O(1)

M2-


1. We will be using binary search on the smaller array.
2. We will make a cut1 on arr1 and cut2 on arr2, if l1<=r2 and l2<=r1 find median else move left or right.
3. If total elements is even the medium will be max(l1,l2)+min(r1+r2)/2 as we will have equal elements on both side.
4. If total elements is odd, we will have the medium as last element of the left half i.e. max(l1,l2)

Time:O(min(logn,log m)) as we are working on the smaller array
Space:O(1)

 double max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    double min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        
        
        if(nums1.size()>nums2.size())
        {
            return findMedianSortedArrays(nums2,nums1);
        }
        
        int n1=nums1.size();
        int n2=nums2.size();
        
        int total=(n1+n2);
        
        int low=0;  //cut can start before the start of the array
        int high=n1; //cut at end after the array
        
        
        while(low<=high) //range of cut
        {
            
            int cut1=low+((high-low)/2);
            int cut2;
            
            if(total%2==0)
            {
                cut2=(total/2) - cut1;
            }
            else
            {
                cut2=(total/2) - cut1 +1;
            }
            
            int l1= (cut1==0)?-1000000009:nums1[cut1-1];
            int r1= (cut1==n1)?1000000009: nums1[cut1];
            int l2= (cut2==0)?-1000000009:nums2[cut2-1];
            int r2= (cut2==n2)?1000000009: nums2[cut2];
        
            
            if(l1<=r2 && l2<=r1)
            {
                if(total%2==0)
                {
                    return (double)(max(l1,l2)+min(r1,r2))/2.0;
                }
                else
                {
                    return max(l1,l2);
                }
            }
            else if(l1>r2)
            {
                high=cut1-1; //move the cut to left
            }
            else
            {
                low=cut1+1; //move the cut to right
            }
            
            
        }
        return 0.0;
        
        
    }
