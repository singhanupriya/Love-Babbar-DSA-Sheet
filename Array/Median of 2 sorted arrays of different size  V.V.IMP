https://www.youtube.com/watch?v=NTop3VTjmxk&t=1547s

M1- Keep a count of elements.

Time:O(M+N), Space:O(1)

M2-
1. We will be using binary search on the smaller array.
2. We will make a cut1 on arr1 and cut2 on arr2, if l1<=r2 and l2<=r1 find median else move left or right.
3. If total elements is even the medium will be max(l1,l2)+min(r1+r2)/2 as we will have equal elements on both side.
4. If total elements is odd, we will have the medium as last element of the left half i.e. max(l1,l2)



#include <iostream>

using namespace std;

int min(int a, int b)
{
    if(a<=b)
    {
        return a;
    }
    return b;
}

int max(int a, int b)
{
    if(a<=b)
    {
        return b;
    }
    return a;
}


int getMedian(int arr1[], int arr2[], int n1, int n2)
{
    if(n1>n2)
    {
        return getMedian(arr2,arr1,n2,n1);
    }
    
    
    int low=0;
    int high=n1-1;
    
    int total=n1+n2;
    
    int cut1=(low+high)/2;
    int cut2;
    
    if(total%2==0)
    {
        cut2=total/2 - cut1;
        
    }
    else
    {
        cut2= total/2 - cut1 +1;
    }
    
    int l1=cut1==0? INT_MIN:arr1[cut1-1];
    int h1=cut1==n1 ? INT_MAX: arr1[cut1];
    int l2=cut2==0 ? INT_MIN:arr2[cut2-1];
    int h2=cut2==n2 ? INT_MAX: arr2[cut2];
    
    while(l1<=h1)
    {
        if(l1<=h2 && l2<=h1)
        {
            if(total%2==0)
            {
                return (max(l1,l2)+min(h1,h2))/2;
            }
            else
            {
                return max(l1,l2);
            }
        }
        else if(l1>h2)
        {
            high=cut1-1;
        }
        else
        {
            low=cut1+1;
        }
    }
    
    return 0;
    
    
}

int main()
{
    int arr1[] = { -5, 3, 6, 12, 15 };
    int arr2[] = { -12, -10, -6, -3, 4, 10 };
    int n1=5;
    int n2=7;
    
    cout<<getMedian(arr1,arr2,n1,n2);

    return 0;
}
