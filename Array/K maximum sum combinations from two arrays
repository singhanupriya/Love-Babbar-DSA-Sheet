https://www.geeksforgeeks.org/k-maximum-sum-combinations-two-arrays/

Brute Force:O(N^2), find all pairs, sort and get top K

Method 2:

1. Sort the arrays, pick the last index and in priority q as <sum,<indexA,indexB>>
2. Do this K times, pop from pq and add indexA, indexB-1 AND indexA-1, indexB

Time:O(NLogN)
Space:K<=N, max N eleemnst will be inserted in pq, space:O(n)



#include <iostream>
#include<queue>
#include<algorithm>

using namespace std;

void solve(int a[], int b[], int n, int K)
{
    priority_queue<pair<int,pair<int,int>>> pq; //(sum,(i,j))
    
    sort(a,a+n);
    sort(b,b+n);
    
    pq.push(make_pair(a[n-1]+b[n-1], make_pair(n-1,n-1)));
    
    int count=K;
    
    while(count>0)
    {
        int sum=pq.top().first;
        
        int currX=pq.top().second.first;
        int currY=pq.top().second.second;
        
        cout<<sum<<" ";
        
        pq.pop();
        
        count--;
        
        if(currX>0)
        {
            int prevX=currX-1;
            sum=a[prevX]+b[currY];
            pq.push(make_pair(sum, make_pair(prevX,currY)));
            
            
        }
        
        if(currY>0)
        {
            int prevY=currY-1;
            sum=a[currX]+b[prevY];
            pq.push(make_pair(sum, make_pair(currX,prevY)));
            
        }
        
    }
}



int main()
{
    int A[] ={4, 2, 5, 1} ;
    int B[] = {8, 0, 3, 5};
    int n=4;
    int K = 3;
    
    solve(A,B,n,K);
    return 0;
}
