https://leetcode.com/problems/top-k-frequent-words/
https://leetcode.com/problems/top-k-frequent-words/discuss/2619516/C%2B%2B-Discussed-3-approaches-and-PQ-Comparators(How-to-do-comparison)

Time:O(NlogK), Space:O(K)

1. Create a min heap of size k, traverse thru all elements if greater than top, push to pq.
2. At end, pop from pq, and put in reverse order

class compare3{
    public:
    
    //min heap, gretaer freq at bottom, a will be psuhed at bottom first
    bool operator()(const pair<int,string>& a, const pair<int,string>& b)
    {
        if(a.first>b.first)
        {
            return true;
        }
        else if(a.first < b.first)
        {
            return false;
        }
        else
        {
            //same freq, 
            
            if(a.second < b.second)
            {
                return true;
            }
            
        }
        
        return false;
    }
    
};

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        
        
        //https://leetcode.com/problems/top-k-frequent-words/discuss/2619516/C%2B%2B-Discussed-3-approaches-and-PQ-Comparators(How-to-do-comparison)
        //create a min heap of size k, compare the remaining elements,
        //if their freq is more than top then pop
        //now we will be k most freq nos in min heap
        //we need to reverse it to get actual ans
        
        int n=words.size();
        unordered_map<string,int> count;
        
        vector<string> ans(k);
        
        
        for(int i=0;i<n;i++)
        {
            count[words[i]]++;
        }
        
        priority_queue<pair<int,string>, vector<pair<int,string>>, compare3> pq;
        
        for(auto it:count)
        {
            pq.push(make_pair(it.second,it.first));
            if(pq.size()>k)
            {
                pq.pop();
            }
        }
        
        int index=k-1;
        
        while(!pq.empty())
        {
            ans[index]=pq.top().second;
            pq.pop();
            index--;
        }
        
        return ans;

            
    }
};

Method 2:

max heap

Time:O(N log n), Space:O(N)




class compare2{
    //max heap
    public:
    
    //a will be pushed first from bottom towards up
    bool operator()(const pair<int,string>& a, const pair<int,string>& b)
    {
        //lower freq element pushed first
        if(a.first<b.first)
        {
            return true;
        }
        else if(a.first > b.first)
        {
            return false;
        }
        else
        {
            //same freq
            {
                //element will higher string will be pushed first
                if(a.second>b.second)
                {
                    return true;
                }
            }
        }
        return false;
    }
    
};

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        
        
        //https://leetcode.com/problems/top-k-frequent-words/discuss/2619516/C%2B%2B-Discussed-3-approaches-and-PQ-Comparators(How-to-do-comparison)
        //create a min heap of size k, compare the remaining elements,
        //if their freq is more than top then pop
        //now we will be k most freq nos in min heap
        //we need to reverse it to get actual ans
        
        int n=words.size();
        unordered_map<string,int> count;
        
        vector<string> ans(k);
        
        
        for(int i=0;i<n;i++)
        {
            count[words[i]]++;
        }
        
        priority_queue<pair<int,string>, vector<pair<int,string>>, compare2> pq;
        
        for(auto it:count)
        {
            pq.push(make_pair(it.second,it.first));
            
        }
        
        int index=1;
        
        while(!pq.empty() && index<=k)
        {
            ans[index-1]=pq.top().second;
            pq.pop();
            index++;
        }
        
        return ans;

            
    }
};
