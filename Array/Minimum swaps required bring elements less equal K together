https://practice.geeksforgeeks.org/problems/minimum-swaps-required-to-bring-all-elements-less-than-or-equal-to-k-together4847/1#

Brute force:

++ Find all elements in array which are <=k, count.
++ Traverse every sub-array of length, count, find the subarray which has lowest no of elements >k.

Time: O(N^2), Space:O(1)

/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<climits>

using namespace std;

int minSwap(int *arr, int n, int k) {
    // Complet the function
    
    //no of elements <=k in array
    int element=0;
    
    for(int i=0;i<n;i++)
    {
        if(arr[i]<=k)
        {
            element++;
        }
    }
    
    //check every sub-array of length element, the sub wihch has min no of nos>k, is my ans
    
    //no of elements in the sub-array >k
    
    int bad=INT_MAX;
    
    
    for(int i=0;i<=n-element;i++)
    {
        int greater_k=0;
        for(int j=i;j<i+element;j++)
        {
            if(arr[j]>k)
            {
                greater_k++;
            }
        }
        
        if(bad>greater_k)
        {
            bad=greater_k;
        }
    }
    
    //if none of the elements in array are <=k, no swap required
    if(element==0)
    {
        bad=0;
    }
    
    return bad;
}

int main()
{
    int arr[]={2, 7, 9, 5, 8, 7, 4};
    int k=5,n=7;
    cout<<minSwap(arr,n, k) ;

    return 0;
}


Method 2:
++ Find all elements in array which are <=k, count.
++ Using sliding window, find the window with size=count, which has lowest no of elements >k

Time: O(N), Space:O(1)


int minSwap(int *arr, int n, int k) {
    // Complet the function
    
    int element=0;
    
    for(int i=0;i<n;i++)
    {
        if(arr[i]<=k)
        {
            element++;
        }
    }
    
    if(element==0)
    {
        return 0;
    }
    
    int i=0,j=0;
    
    int ans=INT_MAX, bad=0;
    
    while(j<n)
    {
        if(arr[j]>k)
        {
            bad++;
        }
        
        if(j-i+1 >= element )
        {
            while(j-i+1 > element)
            {
                if(arr[i]>k)
                {
                    bad--;
                }
                i++;
            }
            
            if(ans>bad)
            {
                ans=bad;
            }
        }
        j++;
        
    }
    
    return ans;
}
