https://www.geeksforgeeks.org/median-of-two-sorted-arrays/

Method 1:

LOGIC- All elements of array 2 which are less than the last element of array 1 should be in array 1, so compare arr1 from n-1 and arr2 from 0 index.
Median will be an arr1[n-1]+arr2[0]/2.

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2, int n) {
        
        
        
        int i=n-1;
        int j=0;
        
        while(nums1[i]>nums2[j] && j<n2 && i>-1)
        {
            int temp=nums1[i];
            nums1[i]=nums2[j];
            nums2[j]=temp;
            
            i--;
            j++;
        }
        
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        
        return (nums1[n-1]+nums2[0])/2;
            
        
        
    }


Method 2: https://www.youtube.com/watch?v=MHNTl_NvOj0

Time: O(log n), Space: O(1)

/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

int min(int a,int b)
{
    if(a<=b)
    {
        return a;
    }
    
    return b;
}

int max(int a,int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}

int median(int arr[],int n)
{
    if(n%2==0)
    {
        return arr[n/2]+arr[n/2-1]/2;
    }
    return arr[n/2];
}

int getMedian(int arr1[],int arr2[],int n)
{
    if(n==0)
    {
        return -1;
    }
    
    if(n==1)
    {
        return (arr1[0]+arr2[0])/2;
        
    }
    
    if(n==2)
    {
        return (max(arr1[0],arr2[0])+min(arr1[1],arr2[1]))/2;
    }
    
    int m1=median(arr1,n);
    int m2=median(arr2,n);
    cout<<m1<<" "<<m2<<"\n";
    
    if(m1==m2)
    {
        return m1;
    }
    
    else if(m2>m1)
    {
        if(n%2==0)
        {
            return getMedian(arr1+n/2-1,arr2,n/2+1);
        }
        
        return getMedian(arr1+n/2,arr2,n-n/2);
    }
    
    else
    {
        if(n%2==0)
        {
            return getMedian(arr2+n/2-1,arr1,n/2+1);
        }
        
        return getMedian(arr2+n/2,arr1,n-n/2);
    }
}



int main()
{
    int arr1[]={ 1, 12, 15, 26, 38 };
    int arr2[]=  { 2, 13, 17, 30, 45 };
    int n=5;
    cout<<getMedian(arr1,arr2,n);

    return 0;
}

