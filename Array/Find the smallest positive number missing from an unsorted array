https://www.youtube.com/watch?v=-lfHWWMmXXM

method 1:

Time:O(N^2), Space:O(1)

1. Missing positive will be in range [1,N+1]
2. Take each element and check if it is present in the array

Method 2:

Time:O(N), Space:O(N)

1. Store all numbers in a map
2. Missing positive will be in range [1,N+1], Take each element and check if it is present in the map


Method 3:

Time:O(N), Space:O(1)

/*
        element 1 should be at index 1, element 2 should be at index 2,
        3 at index 3 and so on..
        
        Here we are talking about positive numbers, in array of size n, positive
        nums can be in range [1,N] best case, so missing posistive 
        will be in range [1,N+1].
        
        Eg:n=5,  {1,2,3,4,5}, missing is 6
        
        Here since we are following 0 based indexing
        
        element.  Index
        1           0
        2           1
        3           2
        4           3
        
        We will traverse thru the array and for all numbers in range    [1,n] as 
        this is the range of pos intergers for size n, if element is not at its correct 
        position n we will swap it.
        
        We will traverse the array again which whichver first element we come 
        across suhc that i+1!=arr[i], is the missing number
        
        
        */



int missingNumber(int arr[], int n) 
    { 
        // Your code here
        
        
        
        for(int i=0;i<n;i++)
        {
            while(arr[i]>=1 && arr[i]<=n && arr[i]!=arr[arr[i]-1]) //we ignore neg nos and
            //numbers >n as we cannot place them as they are out of index, eg at index 0, we have 2, arr[0]=2
            //2 should be at index 1, arr[arr[0]-1]=arr[2-1]=arr[1], if arr[0]=2!=arr[1] not at correct place
            {
                //Element 1 is not at index 0
                //We get the element placed at index 0
                
                int element=arr[i];
                
                //eg; arr[0]=2, 2 should be at index 1
                //this element should be at index i-1.
                //swap arr[0] and arr[1]
                
                swap(arr[i],arr[arr[i]-1]);
            }
        }
        
        //traverse the array and first the first element not placed correctly
        
        for(int i=0;i<n;i++)
        {
            if(arr[i]!=i+1)
            {
                return i+1;
            }
        }
        
        //missing element in n+1
        
        return n+1;
        
        
        
    } 
