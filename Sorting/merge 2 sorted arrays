https://www.geeksforgeeks.org/merge-two-sorted-arrays-o1-extra-space/


1. Idea is to push all smaller elements in arr1.
2. Set i=0(arr1),j=0(arr2), k=n-1(end pointer of arr1).
3. Traverse the arrays using 2 pointer, if arr1[i]<=arr2[j] i++ else swap(arr1[k],arr2[j]) j++,k--;

Time:O(n+m log n+m), Space:O(1)


void merge(int arr1[], int arr2[], int n, int m) {
	    // code here
	    
	    int i=0,k=n-1,j=0;
	    
	    while(i<=k && j<m)
	    {
	        if(arr1[i]<=arr2[j])
	        {
	            i++;
	        }
	        else
	        {
	            swap(arr1[k],arr2[j]);
	            k--;
	            j++;
	        }
	    }
	    
	    sort(arr1,arr1+n);
	    sort(arr2,arr2+m);
	}



Method 2: Use insertion sort.

https://www.youtube.com/watch?v=NWMcj5QFW74

1. Traverse thru the second array and find the element in the 1st array < than it, move all bigger elements in the first array by 1.
2. al last swap 1st and 2nd array element

Time:O(M*N)

void merge(int arr1[], int arr2[], int n, int m) {
	    // code here
	    
	    for(int i=m-1;i>=0;i--) //traverse thru the second array
	    {
	        int j,last=arr1[n-1];
	        
	        for(j=n-1;j>=0 && arr1[j]>arr2[i];j--)
	        {
	            arr1[j+1]=arr1[j];
	        }
	        
	        if(j!=n-1 || last>arr2[i])
	        {
	            arr1[j+1]=arr2[i];
	            arr2[i]=last;
	        }
	        
	        
	    }

Method 3: Gap algorithm
https://www.youtube.com/watch?v=hVl2b3bLzBw&t=314s

Time:O(N+m)log(n+m)
Space:O(1)

void merge(int arr1[], int arr2[], int n, int m) {
	    // code here
	    
	    int gap=ceil((float)(n+m)/2);
	    
	    
	    while(gap>0)
	    {
	        int i=0;
	        int j=gap;
	        
	        while(j< (n+m))
	        {
	            if(j<n && arr1[i]>arr1[j])
	            {
	                swap(arr1[i],arr1[j]);
	            }
	            else if(j>=n && i<n && arr1[i]>arr2[j-n])
	            {
	                swap(arr1[i],arr2[j-n]);
	            }
	            else if(j>=n && i>=n && arr2[i-n]>arr2[j-n])
	            {
	                swap(arr2[i-n],arr2[j-n]);
	            }
	            i++;
	            j++;
	        }
	        
	        if(gap==1)
	        {
	            gap=0;
	        }
	        else
	        {
	            gap=ceil((float)gap/2);
	        }
	    }
	    
	    
	}
