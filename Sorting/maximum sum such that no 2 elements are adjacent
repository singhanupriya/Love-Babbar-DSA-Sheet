https://practice.geeksforgeeks.org/problems/stickler-theif-1587115621/1
https://www.geeksforgeeks.org/find-maximum-possible-stolen-value-houses/

Mthod - Memoisation

n->index
1. If n<0 return 0,n=0 return that arr[0], now u have two choice to pick current element or not.
2 If u pick current element at index n -> currPick= arr[n] +f(n-2)  //current + max value till (n-2)ndex
3. If u dont pick curr, u will have to go with prevPick=f(n-1) //max value upto index (n-1)
4. U will select the maximum of the two dp[n]=max(currPick,prevPick).


public:
    //Function to find the maximum money the thief can get.
    
    int maxSum(int arr[], int n, vector<int>& dp)
    {
        
        if(n<0)
        {
            return 0;
        }
        if(n==0)
        {
            return arr[0];
        }
        
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        int currPick=arr[n]+ maxSum(arr,n-2,dp);  //if curr element at index n is picked it can be added to the n-2 index
        int prevPick=maxSum(arr,n-1,dp);  //if curr element not picked, n-1 index
        
        dp[n]=max(currPick,prevPick);
    }
    
    
    int FindMaxSum(int arr[], int n)
    {
        // Your code here
        vector<int> dp(n,-1);
        return maxSum(arr,n-1,dp);
    }
};

Mthod 2- 
1. dp[0]=arr[0];
2. dp[1]=max(arr[0],arr[1]);
3. from i=2 to n-1, dp[i]=max(arr[i]+dp[i-2],dp[i-1]);
As u need only prev 2 values, u can also store them in 2 variable , Space:O(1)

Time:O(n), Space:O(N)

int FindMaxSum(int arr[], int n)
    {
        // Your code here
        if(n<0)
        {
            return 0;
        }
        vector<int> dp(n,0);
        dp[0]=arr[0];
        dp[1]=max(arr[0],arr[1]);
        for(int i=2;i<n;i++)
        {
            dp[i]=max(arr[i]+dp[i-2],dp[i-1]);
        }
        return dp[n-1];
        
    }
