https://www.geeksforgeeks.org/find-a-pair-with-the-given-difference/
 https://www.youtube.com/watch?v=XGrXiVi7Ces&t=467s

Mthod 1- using unordered map

1. Store all array elements in map with freq
2. Traverse array again, if diff==0 check if freq for any element >1
                        else check if (arr[i]+diff) exists in the map.

Time:O(N), Space:O(N)


bool findPair(int arr[], int size, int n){
    //code
    
    unordered_map<int,int> m;
    for(int i=0;i<size;i++)
    {
        m[arr[i]]++;
    }
    
    for(int i=0;i<size;i++)
    {
        if(n==0)
        {
            if(m[arr[i]]>1)
            {
                return true;
            }
        }
        else
        {
            if(m.find(arr[i]+n)!=m.end())
            {
                return true;
            }
        }
        
    }
    return false;
    
}

Mthod 2- Similar to pair with given sum

1. Sort array
2. If we keep i=0 and j=n-1, we wnt able to decide bcoz if we j-- diff decreas and on i++ also diff dec
3. Put i=0,j=1 while i<n && j< n, 
                if (arr[j]-arr[i]==diff && i!=j) return true
                else if(arr[j]-arr[i]<diff,j++
                else i--.
4. If no such pair found, return false

Time:O(nlogn), Space:O(1)

bool findPair(int arr[], int size, int n){
    //code
    
    sort(arr,arr+size);
    
    int i=0,j=1;
    
    while(i<size && j<size)
    {
        if(arr[j]-arr[i]==n && i!=j)
        {
            return true;
        }
        else if(arr[j]-arr[i]>n)
        {
            i++;
        }
        else
        {
            j++;
        }
    }
    
    return false;
    
}

Method 3- Using binary search

1. Sort array
2. Traverse array, for arr[i], binary search arr[i]+diff

Time:O(nlogn + nlogn), Space:O(log n)
