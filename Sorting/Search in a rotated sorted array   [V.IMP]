https://www.youtube.com/watch?v=oTfPJKGEHcc&t=416s

1. Find the pivot element, we will get 2 sorted arrays from index 0 to pivot and pivot+1 to n-1, then find using binary search.
2.Finding pivot- use binary search, find mid
  - if arr[mid]>arr[mid+1] && arr[mid]+arr[low], mid is pivot
   - pivot will be on left of mid if, arr[mid]<arr[mid+1] && arr[mid]<arr[low]
   -else pivot will be on right
   
  2 iterations needed
Time:O(log n), Space:O(1)


#include <iostream>
#include<vector>

using namespace std;

int search(vector<int>& arr, int target) {
        
        
        int pivot;
        int low=0;
        int high=arr.size()-1;
        
        //find pivot
        while(low<=high)
        {
            if(low==high)
            {
                pivot=high;
                break;
            }
            
            int mid=low+(high-low)/2;
            
            if(arr[mid]>arr[mid+1] && arr[mid]>arr[low])   
            {
                pivot=mid;
            }
            else if(arr[mid]<arr[mid+1] && arr[mid]<arr[low]) //means pivot in left
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
            
            
        }
        
        low=0;
        high=arr.size()-1;
        
        
        if(target>=arr[low] && target<=arr[pivot])
        {
            high=pivot;
        }
        else
        {
            low=pivot+1;
        }
       
        
        int ans=-1;
        
        
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(arr[mid]==target)
            {
                ans=mid;
                break;
                
            }
            else if(target>arr[mid])
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        
        
        return ans;
        
        
    }

int main()
{
    vector<int> arr{5, 6, 7, 8, 9, 10, 1, 2, 3};;
    cout<<search(arr,3);

    return 0;
}

Method 2 - Single iteration

Observation- If we find the middle element, either the left or right side will be strctly increasing
1. If mid==target, return
2. If left str inc, mid>=left, if element in range high=mid-1 else low=mid+1
3. else right str inc, if in range, low=mid+1 else high=mid-1


class Solution {
public:
    int search(vector<int>& arr, int target) {
        
        
        
        int low=0;
        int high=arr.size()-1;
        
        while(low<=high)
        {
            int mid=low +(high-low)/2;
            
            if(arr[mid]==target)
            {
                return mid;
            }
            else if(arr[mid]>=arr[low]) //left strictly increasing, element not found above
            {
                if(target>=arr[low] && target<=arr[mid])
                {
                    high=mid; 
                }
                else
                {
                    low=mid+1;
                }
            }
            else //right strictly increasing
            {
                if(target>=arr[mid] && target<=arr[high])
                {
                    low=mid;
                }
                else
                {
                    high=mid-1;
                }
            }
        }
        
        return -1;
        
        
        
    }
};
