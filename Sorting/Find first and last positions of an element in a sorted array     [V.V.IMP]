https://practice.geeksforgeeks.org/problems/first-and-last-occurrences-of-x3116/1#

1. Use bnary search for first and last
Time;O(log n), Space:O(log n)

int binary_first(int arr[],int low,int high, int x)
{
    if(low<=high)
    {
        int mid=low+(high-low)/2;
        
        if(arr[mid]==x && (arr[mid-1]<x || mid==0))
        {
            return mid;
        }
        else if(arr[mid]<x)
        {
            return binary_first(arr,mid+1,high,x);
        }
        else
        {
            //if the mid matches the x value but not first occurence, then check before
            return binary_first(arr,low,mid-1,x);
        }
        
    }
    
    return -1;
}


int binary_last(int arr[],int low,int high, int x,int n)
{
    if(low<=high)
    {
        int mid=low+(high-low)/2;
        
        if((mid == n - 1 || x < arr[mid + 1]) && arr[mid] == x)
        {
            return mid;
        }
        else if(arr[mid]>x)
        {
            return binary_last(arr,low,mid-1,x,n);
        }
        else
        {
            return binary_last(arr,mid+1,high,x,n);
        }
        
    }
    
    return -1;
}

vector<int> find(int arr[], int n , int x )
{
    // code here
    
    vector<int> res;
    int end;
    
    int start=binary_first(arr,0,n-1,x);
    res.push_back(start);
    
    if(start!=-1)
    {
        end=binary_last(arr,0,n-1,x,n);
        
        
    }
    else
    {
        end=-1;
    }
    
    res.push_back(end);
    return res;
    
    
    
}


Method 1:
Iterative binary search

Time:O(log n), Space:O(1)


int first(int arr[],int low,int high, int x)
{
    int res=-1;
    while(low<=high)
    {
        int mid=low+(high-low)/2;
        if(arr[mid]>x)
        {
            high=mid-1;
        }
        else if(arr[mid]<x)
        {
            low=mid+1;
        }
        else
        {
            res=mid;
            high=mid-1;
        }
    }
    
    return res;
}

int last(int arr[],int low,int high, int x, int n)
{
    int res=1;
    while(low<=high)
    {
        int mid=low+(high-low)/2;
        
        if(arr[mid]<x)
        {
            low=mid+1;
        }
        else if(arr[mid]>x)
        {
            high=mid-1;
        }
        else
        {
            res=mid;
            low=mid+1;
        }
    }
    
    return res;
    
    
}

vector<int> find(int arr[], int n , int x )
{
    // code here
    
    vector<int> res;
    
    int start=first(arr,0,n-1,x);
    res.push_back(start);
    
    int end=-1;
    
    if(start!=-1)
    {
        end=last(arr,0,n-1,x,n);
    }
    res.push_back(end);
    return res;
    

}
