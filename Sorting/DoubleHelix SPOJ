https://www.youtube.com/watch?v=w-6YHcGmSxM

1. Find sum of both arrays till the intersection, whichever sum is the max choose that path. use merging in merge sort concept using 2 pointer
2. At bridge, reset sum=0 for each path and find sum of each till next intersection, choose the max, keep doing that

Method 1- 2 pointer O(n+m)


/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;

int max(int a, int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}

int findPath(int arr1[], int arr2[], int n, int m)
{
    int sumPath1=0;
    int sumPath2=0;
    int ans=0;
    
    int i=0,j=0;
    
    while(i<n && j<m)  //stop if one of the path ends
    {
        if(arr1[i]<arr2[j])
        {
            sumPath1+=arr1[i];
            i++;
        }
        else if(arr2[j]<arr1[i])
        {
            sumPath2+=arr2[j];
            j++;
        }
        else 
        {
            //if intersection, find current max sum and add to reset, reset sums again
            int temp=max(sumPath1,sumPath2);
            ans=ans+temp+arr1[i];
            i++;
            j++;
            sumPath2=0;
            sumPath1=0;
        }
    }
    
    while(i<n)  //keep adding for whichever path remains
    { 
        sumPath1=sumPath1+arr1[i];
        i++;
    }
    
    while(j<m)   //keep adding for whichever path remains
    {
        sumPath2=sumPath2+arr2[j];
        j++;
    }
    ans+=max(sumPath1,sumPath2);  //once u are at the last intersection point, u will choose the path whose sum till the end is max
    // eg  path 1- 57 61 62
    // path 2- 57 100, select sum1=61+62
    return ans;
}

int main()
{
    int arr1[]={3, 5, 7, 9, 20, 25, 30, 40, 55, 56, 57, 60, 62};
    int n=sizeof(arr1)/sizeof(arr1[0]);
    int arr2[]={1, 4, 7, 11, 14, 25, 44, 47, 55, 57, 100};
    int m=sizeof(arr2)/sizeof(arr2[0]);
    
    cout<<findPath(arr1,arr2,n,m);

    return 0;
}
