https://www.youtube.com/watch?v=2JSQIhPcHQg

1. Restrictions- All students must have a book, we need to reduce burden, hence minimise the max no of pages a student has to read.
2. Max number of pages a student has to read = sum(arr), hence, ans will lie between 0 and sum.
3. Use binary search, get mid, if using this mid as the max pages, we can divide the books into cont grps such that all students have one,
  If possible, reduce max limit further, high=mid-1
  else low=mid+1;

Time:O(N log sum), Space:O(1)


/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;

 bool isValid(int A[],int N, int M, long long mid)
    {
        long long sum=0;
        int student=1;
        
        for(int i=0;i<N;i++)
        {
            
            
            sum=sum+A[i];
            
            if(sum>mid)
            {
                
                student++;
                
                sum=A[i];
                if(A[i]>mid)                 // to check if any element is greater than mid, not possible
                {
                    return false;
                }
            }
            
            if(student>M)
            {
                return false;
            }
        }
        
        
        return true;
    }
    
    
    int findPages(int A[], int N, int M) 
    {
        //code here
        long long res=-1;    //if no arrangemnet possible
        if(N<M)
        {
            return res;
        }
        
        long long end=0;
        for(int i=0;i<N;i++)
        {
            end=end+A[i];
        }
        
        long long start=0;
        
        while(start<=end)
        {
            long long mid=start + (end-start)/2;
            if(isValid(A,N,M,mid))
            {
                
                res=mid;
                end=mid-1;     //try to reduce further
            }
            else
            {
                start=mid+1;
            }
        }
        
        return res;
    }

int main()
{
    int arr[] = {13,31,37,45,46,54,55,63,73,84,85};
    int n = sizeof (arr) / sizeof (arr[0]);
    int m = 9; //No. of students
 
    cout << "Minimum number of pages = "
         << findPages(arr, n, m) << endl;

    return 0;
}
