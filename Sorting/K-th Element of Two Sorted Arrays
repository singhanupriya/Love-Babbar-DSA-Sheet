https://www.youtube.com/watch?v=nv7F4PiLUzo

Method 1-
1. Merge two sorted arrays using O(1) space and find kth element.
Time:O(nlogn+mlogm)

int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        
        int i=0,j=0,x=n-1;
        
        while(i<=x && j<m)
        {
            if(arr1[i]<=arr2[j])
            {
                i++;
            }
            else
            {
                swap(arr1[x],arr2[j]);
                x--;
                j++;
            }
        }
        
        sort(arr1,arr1+n);
        sort(arr2,arr2+m);
        
        if(k<=n)
        {
            return arr1[k-1];
        }
        else 
        {
            return arr2[k-n-1];
        }
        
    }
    
    
    Method 2
    - Use mergesort merge logic, keep a counter of total elements sorted till now Time:O(M+n)
    
    if(x==k)
                {
                    return arr2[j];
                }
                j++;
                x++;

method 3

- using binary search on smaller array Time:O(min(logn, logm)), n-len of smaller array

- Create an array of size k using some elements of arr1 and arr2, the max of it will be my ans.
- l1 left boundary of arr1, l2- left boundary of arr2,r1 right boundary of arr1, r2- right boundary of arr2, valid --> l1<=r2 and l2<=r1
- make cuts in smaller array, low=max(0,k-m), high=min(n,k)
- while (low<=high), find cut1=low+high/2, 
        int l1=cut1==0?INT_MIN : arr1[cut1-1];
            int l2=cut2==0 ? INT_MIN :arr2[cut2-1];
            int r1= cut1==n ? INT_MAX : arr1[cut1];
            int r2=cut2==m ? INT_MAX :arr2[cut2];
            if(l2<=r1 && l1<=r2)
            {
                return max(l1,l2);
            }
            else if(l2>r1)
            {
                low=cut1+1;
            }
            else
            {
                high=cut1-1;
            }

nt kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        //assuming n is smaller here, as we are running binary search on smaller array
        if(n>m)
        {
            return kthElement(arr2,arr1,m,n,k);
        }
        
       //min elements u have to pick from the array
        //if the size of second array is < k, u will have to pick some elemenst
        //from 1st array so low can't be 0
        int low=max(0,k-m);
        
        //if 1st array has k elements, u high will be k given k<n
        int high=min(n,k);
        
        while(low<=high)
        {
            int cut1=low+(high-low)/2;
            int cut2=k-cut1;
            
            int l1=cut1==0?INT_MIN : arr1[cut1-1];
            int l2=cut2==0 ? INT_MIN :arr2[cut2-1];
            int r1= cut1==n ? INT_MAX : arr1[cut1];
            int r2=cut2==m ? INT_MAX :arr2[cut2];
            
            if(l2<=r1 && l1<=r2)
            {
                return max(l1,l2);
            }
            else if(l2>r1)
            {
                low=cut1+1;
            }
            else
            {
                high=cut1-1;
            }
            
            
        }
        
        return 1;
        
    }
};
