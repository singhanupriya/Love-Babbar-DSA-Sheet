
https://www.youtube.com/watch?v=2JSQIhPcHQg


 bool isValid(int arr[], int n, int k, long long mid)
    {
        int painter=1;
        long long sum=0;
        
        for(int i=0;i<n;i++)
        {
            sum=sum+arr[i];
            
            if(sum>mid)
            {
                painter++;
                sum=arr[i];
                
                if(arr[i]>mid)
                {
                    return false;
                }
            }
            
            if(painter>k)
            {
                return false;
            }
        }
        return true;
    }
  
    long long minTime(int arr[], int n, int k)
    {
        // code here
        // return minimum time
        
        //here a painter can get 0 walls also so we dont write if (n>k) return false
        
        long long res=-1;
        
        long long end=0;
        
        for(int i=0;i<n;i++)
        {
            end=end+arr[i];
        }
        long long start=0;
        
        while(start<=end)
        {
            long long mid=start + (end-start)/2;
            
            if(isValid(arr,n,k,mid))
            {
                res=mid;
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
        }
        
        return res;
        
    }
};

Method 2:

Time:O(Nlog sum)

 public:
  
    int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
  
    bool solve(int arr[], int n, int k, long long mid)
    {
        int painters=1;
        long long sum=0;
        
        for(int i=0;i<n;i++)
        {
            if(arr[i]>mid)
                {
                    return false;
                }
            sum+=arr[i];
            
            if(sum>mid)
            {
                painters++;
                sum=arr[i];
                
            }
            
            
            
            if(painters>k)
            {
                return false;
            }
        }
        
        
        
        return true;
    
    
    }
  
  
    long long minTime(int arr[], int n, int k)
    {
        // code here
        // return minimum time
        
        int minElement=INT_MAX;
        
        long long sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=arr[i];
            minElement=min(minElement,arr[i]);
        }
        
        
        
        long long low=minElement; //min time taken
        long long high=sum;
        
        long long ans=-1;
        
        
        while(low<=high)
        {
            long long mid=low + (high-low)/2;
            
            if(solve(arr,n,k,mid))
            {
                ans=mid;
                high=mid-1; //as we need min
            }
            else
            {
                low=mid+1;
            }
            
        }
        
        return ans;
        
        
    }
