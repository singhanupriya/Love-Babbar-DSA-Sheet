https://www.youtube.com/watch?v=6Aqxv29RGPc&list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi&index=58


1. Recursively divide the array unless u have a single element left
2. Keep merging as u move up

Time:O(nlog n), Space:O(N) not in place.
-Stable
-Not adaptive (will run if if the array is sorted)



void merge(int arr[], int low, int mid, int high)
    {
         // Your code here
         
         
         int i=low;
        int j=mid+1;
        int k=0;
        
        int* newArr=new int[high-low+1]; //indexing will start from 0
        
        while(i<=mid && j<=high)
        {
            if(arr[i]<=arr[j])
            {
                newArr[k]=arr[i];
                i++;
                k++;
            }
            else
            {
                newArr[k]=arr[j];
                j++;
                k++;
            }
        }
        
        while(i<=mid )
        {
            newArr[k]=arr[i];
                i++;
                k++;
            
        }
        
        while(j<=high )
        {
            newArr[k]=arr[j];
                j++;
                k++;
            
        }
        
        i=0,j=low; //i->index of new array
        //j->index of new array
        
        while(i<=k && j<=high)
        {
            arr[j]=newArr[i];
            j++;
            i++;
        }
    
    
    }
    public:
    void mergeSort(int arr[], int low, int high)
    {
        //code here
        int mid;
    if(low<high)
    {
        mid=low + (high-low)/2;
        mergeSort(arr,low,mid);
        mergeSort(arr,mid+1,high);
        merge(arr,low,mid,high);
    }
    }
};
int main()
{
    int arr[]={10,4,56,23,7,1};
    int n=sizeof(arr)/sizeof(arr[0]);
    mergeSort(arr,0,n-1);
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    

    return 0;
}
