https://www.youtube.com/watch?v=zr_AoTxzn0Ya

Logic- 
--For first occ, if(arr[mid]==x && (mid==0 || arr[mid-1]<x), here might be a pssoibility that mid=x but not fist occ so u will check on left side, move to right only when we are sure x is not on left i.e. x>mid, 
--for last occ, if(arr[mid]==x && (mid==n-1 || arr[mid+1]>x), here might be a pssoibility that mid=x but not occ so we need to check on right side, we will move to left only when we are sure its not on right i.e. mid>x.


Recursive

Time:O(log n), Space:O(log n)

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>

using namespace std;

int searchFirst(vector<int> arr, int low, int high, int x)
{
    
    if(low<=high)
    {
        int mid=low+(high-low)/2;
    
        if( (mid == 0 || x > arr[mid - 1]) && arr[mid] == x)
        {
            return mid;
        }
        else if(arr[mid]<x)
        {
            return searchFirst(arr,mid+1,high,x);
        }
        else
        {
            return searchFirst(arr,low,mid,x);
        }
    }
    
    
    return -1;
    
    
    
}

int searchLast(vector<int> arr, int low, int high, int x)
{
    
    if(low<=high)
    {
        int mid=(low+high)/2;
    
        if((mid==high || arr[mid+1]>x) && arr[mid]==x)
        {
            return mid;
        }
        else if(arr[mid]>x)
        {
            return searchLast(arr,low,mid-1,x);
        }
        else
        {
            return searchLast(arr,mid+1,high,x);
        }
    
    }
    
    return -1;
    
    
    
}

int main()
{
    vector<int> arr={ 1, 3, 5, 5, 5, 5, 67, 123, 125 };
    int n=arr.size();
    int x=5;
    int start=searchFirst(arr,0,n-1,x);
    int end=searchLast(arr,0,n-1,x);
    cout<<start<<" "<<end;

    return 0;
}

Iterative:


Time:O(lon g), Space:O(1)

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>

using namespace std;

int searchFirst(vector<int> arr, int low, int high, int x)
{
    
    if(low<=high)
    {
        int mid=low+(high-low)/2;
    
        if( (mid == 0 || x > arr[mid - 1]) && arr[mid] == x)
        {
            return mid;
        }
        else if(arr[mid]<x)
        {
            return searchFirst(arr,mid+1,high,x);
        }
        else
        {
            return searchFirst(arr,low,mid,x);
        }
    }
    
    
    return -1;
    
    
    
}

int searchLast(vector<int> arr, int low, int high, int x)
{
    
    if(low<=high)
    {
        int mid=(low+high)/2;
    
        if((mid==high || arr[mid+1]>x) && arr[mid]==x)
        {
            return mid;
        }
        else if(arr[mid]>x)
        {
            return searchLast(arr,low,mid-1,x);
        }
        else
        {
            return searchLast(arr,mid+1,high,x);
        }
    
    }
    
    return -1;
    
    
    
}

int main()
{
    vector<int> arr={ 1, 3, 5, 5, 5, 5, 67, 123, 125 };
    int n=arr.size();
    int x=5;
    int start=searchFirst(arr,0,n-1,x);
    int end=searchLast(arr,0,n-1,x);
    cout<<start<<" "<<end;

    return 0;
}


Method 2-

Time:O(log n), Space:O(1)

 vector<int> result;
    
    
    //first occurence;
    
    int low=0;
    int high=n-1;
    
    int first=-1;
    
    while(low<=high)
    {
        int mid=low + (high-low)/2;
        
        if(mid==0 && arr[mid]==x)
        {
            first=mid;
            break;
        }
        else if(mid>0 && arr[mid-1]<arr[mid] && arr[mid]==x)
        {
            first=mid;
            break;
        }
        else if(arr[mid]<x)
        {
            low=mid+1;
        }
        else
        {
            high=mid-1;
        }
    }
    
    
    //last occ
    
    
    low=0,high=n-1;
    int second=-1;
    
    while(low<=high)
    {
        int mid=low + (high-low)/2;
        
        if(mid==n-1 && arr[mid]==x)
        {
            second=mid;
            break;
        }
        else if(mid<n-1 && arr[mid+1]>arr[mid] && arr[mid]==x)
        {
            second=mid;
            break;
        }
        else if(arr[mid]>x)
        {
            high=mid-1;
        }
        else
        {
            low=mid+1;
        }
        
        
    }
    
    result.push_back(first);
    result.push_back(second);
    
    return result;
    
