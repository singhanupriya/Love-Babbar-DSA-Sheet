https://practice.geeksforgeeks.org/problems/binary-tree-to-bst/1#

1. Store inorder of BT in array, sort it and place in BST as inorder
Time:O(N logN), space;O(N)


M1-

void inorder(Node* root, vector<int>& result)
    {
        if(root)
        {
            inorder(root->left,result);
            result.push_back(root->data);
            inorder(root->right,result);
        }
    }
    
    void arrange(Node* root, int& i, vector<int>& result, int n)
    {
        if(root && i<n)
        {
            arrange(root->left,i,result,n);
            root->data=result[i];
            i++;
            arrange(root->right,i,result,n);
        }
    }
    
    
    Node *binaryTreeToBST (Node *root)
    {
        //Your code goes here
        
        if(!root)
        {
            return nullptr;
        }
        
        vector<int> result;
        inorder(root,result);
        
        sort(result.begin(),result.end());
        
        int i=0;
        int n=result.size();
        arrange(root,i,result,n);
        
        return root;
        
        
    }
    
    M2-


class Solution{
  public:
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    
    void inorder(Node* root,vector<int>& in)
    {
        if(root)
        {
            inorder(root->left,in);
            in.push_back(root->data);
            inorder(root->right,in);
        }
    }
    
    Node* check(Node* root,vector<int>& in,int& count)
    {
        if(!root)
        {
            return NULL;
        }
        
        if(root->left)
        {
            check(root->left,in,count);
        }
        root->data=in[count];
        count++;
        if(root->right)
        {
            check(root->right,in,count);
        }
        return root;
    }
    
    Node *binaryTreeToBST (Node *root)
    {
        //Your code goes here
        vector<int> in;
        
        inorder(root,in);
        
        sort(in.begin(),in.end());
        
        int count=0;
        
        return check(root,in,count);
        
        
    }
};
