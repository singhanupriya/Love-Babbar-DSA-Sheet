https://www.geeksforgeeks.org/morris-traversal-for-preorder/

Time:O(N), Space:O(1)

// C++ program for Morris Preorder traversal
#include <bits/stdc++.h>
using namespace std;

class node
{
	public:
	int data;
	node *left, *right;
};

/* Helper function that allocates a new node with the
given data and NULL left and right pointers. */
node* newNode(int data)
{
	node* temp = new node();
	temp->data = data;
	temp->left = temp->right = NULL;
	return temp;
}

// Preorder traversal without recursion and without stack

void morrispre(node* root)
{
    node* curr=root;
    
    while(curr)
    {
        if(!curr->left)
        {
            cout<<curr->data<<" ";
            curr=curr->right;
        }
        
        else
        {
            node* prev=curr->left;
            
            while(prev->right!=NULL && prev->right!=curr)
            {
                prev=prev->right;
            }
            
            if(prev->right==curr)//left side visited
            {
                prev->right=NULL;
                curr=curr->right;
            }
            else
            {
                cout<<curr->data<<" ";
                prev->right=curr;
                curr=curr->left;
            }
        }
    }
}

// Function for Standard preorder traversal
void preorder(node* root)
{
	if (root)
	{
		cout<<root->data<<" ";
		preorder(root->left);
		preorder(root->right);
	}
}

/* Driver program to test above functions*/
int main()
{
	//node* root = NULL;

    struct node* root = newNode(5);
    root->left = newNode(3);
    root->right = newNode(7);
    root->left->left = newNode(2);
    root->left->right = newNode(4);

	morrispre(root);

	cout<<endl;
	preorder(root);


	return 0;
}

//This code is contributed by rathbhupendra
