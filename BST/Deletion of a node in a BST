https://leetcode.com/problems/delete-node-in-a-bst/submissions/

1. Find the key to be deleted
2. If present in tree:
  - If it has no child simply return null
   - if one child, delete root and return that child
   - if both, find succ/pre, replace root with that value, then use delete fn to delete it

O(H)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        
        if(!root)
        {
            return NULL;
        }
        
        if(root->val > key)
        {
            root->left=deleteNode(root->left,key);
        }
        else if(root->val < key)
        {
            root->right=deleteNode(root->right,key);
        }
        else  //matches
        {
            if(!root->left && !root->right)
            {
                return NULL;   
            }
            
            if(root->left && !root->right)
            {
                TreeNode* temp=root->left;
                delete(root);
                return temp;
            }
            else if(!root->left && root->right)
            {
                TreeNode* temp=root->right;
                delete(root);
                return temp;
            }
            else   //both child exist
            {
                TreeNode* temp=root->left; //find predecessor or successor ans replace with it
                while(temp->right)
                {
                    temp=temp->right;
                }
                root->val=temp->val;
                root->left=deleteNode(root->left,temp->val);
                return root;
                
            }
            
            
        }
        
        return root;
            
        
    }
};
