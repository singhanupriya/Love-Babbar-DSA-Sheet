https://www.geeksforgeeks.org/merge-two-balanced-binary-search-trees/

1. Store inorder of two BSTs in 2 arrays.
2. Merge them into one array using merge sort merge concept.
3. Construct balanced BST, taking mid as the root use concept normal BST ->balanced BST

Time:O(M+N), Space:O(M+N)


// C++ program to Merge Two Balanced Binary Search Trees
#include<bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
and a pointer to right child */
class node
{
	public:
	int data;
	node* left;
	node* right;
};

// A utility function to merge two sorted arrays into one

node* newNode(int data)
{
	node* Node = new node();
	Node->data = data;
	Node->left = NULL;
	Node->right = NULL;

	return(Node);
}

void in(node* root,vector<node*>& res)
{
    if(root)
    {
        in(root->left,res);
        res.push_back(root);
        in(root->right,res);
    }
}

node* build(vector<node*> res,int start,int end)
{
    if(start>end)
    {
        return NULL;
    }
    
    int mid=(start+end)/2;
    node* root=res[mid];
    
    root->left=build(res,start,mid-1);
    root->right=build(res,mid+1,end);
    
    return root;
}

node* mergeTrees(node* root1, node* root2)
{
    vector<node*> res1;
    vector<node*> res2;
    in(root1,res1);
    in(root2,res2);
    
   // cout<<res1.size()<<" "<<res2.size();
    
    vector<node*> res;
    
    int i=0,j=0;
    int m=res1.size();
    int n=res2.size();
    
    while(i<m && j<n)
    {
        if((res1[i])->data <= (res2[j])->data)
        {
            res.push_back(res1[i]);
            i++;
        }
        else
        {
            res.push_back(res2[j]);
            j++;
            
        }
    }
    
    while(i<m)
    {
        
        res.push_back(res1[i]);
        i++;
        
    }
    while(j<n)
    {
        res.push_back(res2[j]);
        j++;
            
        
    }
    
    
    
    int end=res.size()-1;
    
    return build(res,0,end);
    
    
    
}

// A utility function to print inorder
// traversal of a given binary tree
void printInorder(node* node)
{
	if (node == NULL)
		return;

	/* first recur on left child */
	printInorder(node->left);

	cout << node->data << " ";

	/* now recur on right child */
	printInorder(node->right);
}

// A utility unction to merge
// two sorted arrays into one


/* Driver code*/
int main()
{
	/* Create following tree as first balanced BST
		100
		/ \
		50 300
	/ \
	20 70
	*/
	node *root1 = newNode(100);
	root1->left	 = newNode(50);
	root1->right = newNode(300);
	root1->left->left = newNode(20);
	root1->left->right = newNode(70);

	/* Create following tree as second balanced BST
			80
		/ \
		40 120
	*/
	node *root2 = newNode(80);
	root2->left	 = newNode(40);
	root2->right = newNode(120);

	node* mergedTree = mergeTrees(root1, root2);

	cout << "Following is Inorder traversal of the merged tree \n";
	printInorder(mergedTree);

	return 0;
}

// This code is contributed by rathbhupendra
