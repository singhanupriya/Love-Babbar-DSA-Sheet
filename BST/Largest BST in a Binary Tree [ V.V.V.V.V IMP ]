
https://www.youtube.com/watch?v=6nJ_fUcCTNU

1. Here a node with root will be a BST if its left and right subtree is bst and all values on its left is smaller than it (max on left < root) and all values on its right
are bigger than it (min on right > root)
2. This will be a postorder traversal as first we need to check left and right subtree and then process root.

Time:O(N), Space:O(H)

 vector<int> solve(Node* root)
    {
        if(!root)
        {
            return {1,0,INT_MAX,INT_MIN};
        }
        
        if(!root->left && !root->right)
        {
            return {1,1,root->data,root->data};
        }
        
        //postorder
        
        vector<int> left=solve(root->left);
        vector<int> right=solve(root->right);
        
        
        //left and right bst
        if(left[0] & right[0])
        {
            if(left[3]<root->data && right[2]>root->data)
            {
                int currMin=min(left[2],root->data);// min of left min or root, in case left is
                //null so min is INT_MAX
                int currMax=max(right[3],root->data);//max of right max or root, in case right is
                //null so min is INT_MIN
                
                return {1,left[1]+right[1]+1,currMin,currMax};
            }
        }
        
        //if not bst 
        return {0,max(left[1],right[1]),0,0};
        
        
    }
    
    int largestBst(Node *root)
    {
    	//Your code here
    	
    	if(!root)
    	{
    	    return 0;
    	}
    	
    	vector<int> ans=solve(root);
    	return ans[1];
    	
    }
