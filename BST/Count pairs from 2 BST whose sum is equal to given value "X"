https://practice.geeksforgeeks.org/problems/brothers-from-different-root/1#


M1-

Time:O(N1+N2), Space:O(H1+H2)

int countPairs(Node* root1, Node* root2, int x)
    {
        
        int count=0;
        stack<Node*> s1,s2;
        
        while(1)
        {
            //inorder of 1 st tree
            while(root1)
            {
                s1.push(root1);
                root1=root1->left;
            }
            //reverse inorder of 2nd tree
            while(root2)
            {
                s2.push(root2);
                root2=root2->right;
            }
            
            if(s1.empty() || s2.empty())
            {
                break;
            }
            
            Node* top1=s1.top();
            Node* top2=s2.top();
            
            if(top1->data+top2->data==x)
            {
                count++;
                s1.pop();
                root1=top1->right;
                
                s2.pop();
                root2=top2->left;
            }
            else if(top1->data+top2->data > x)
            {
                s2.pop();
                root2=top2->left;
            }
            else
            {
                s1.pop();
                root1=top1->right;
            }
        }
        
        return count;
        

    }

M1-

1. Store one BST in map.
2. Inorder other bst and see if its sum-node is present in map

Time:O(N+M), Space:O(M)


class Solution
{
public:
    
    void inorder(Node* root1,unordered_map<int,int>& m )
    {
        if(root1)
        {
            inorder(root1->left,m);
            m[root1->data]++;
            inorder(root1->right,m);
        }
    }
    
    void inorder_count(Node* root2,unordered_map<int,int>& m, int x,int& count)
    {
        if(root2)
        {
            inorder_count(root2->left,m,x,count);
            count=count+m[x-(root2->data)];
            
            inorder_count(root2->right,m,x,count);
            
        }
    }
    
    int countPairs(Node* root1, Node* root2, int x)
    {
        unordered_map<int,int> m; 
        inorder(root1,m);
        int count=0;
        inorder_count(root2,m,x,count);
        
        return count;
        
        
    }
};


M2-

1. Do inorder of root1.
2. Search for sum-root1 in tree 2

Time:O(N*H), Space:O(1)

bool search(Node* root2, int key)
    {
        if(!root2)
        {
            return false;
        }
        if(root2->data==key)
        {
            return true;
        }
        else if(root2->data > key)
        {
            return search(root2->left,key);
        }
        else
        {
            return search(root2->right,key);
        }
        
    }
    
    void inorder(Node* root1,Node* root2,int& count, int x)
    {
        if(root1)
        {
            inorder(root1->left,root2,count,x);
            
            if(search(root2,x - (root1->data)))
            {
                
                count++;
            }
            inorder(root1->right,root2,count,x);
        }
    }
    
    
    int countPairs(Node* root1, Node* root2, int x)
    {

        int count=0;
        inorder(root1,root2,count,x);
        return count;
        
    }

