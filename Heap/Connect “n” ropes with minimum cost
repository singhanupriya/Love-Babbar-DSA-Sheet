https://practice.geeksforgeeks.org/problems/minimum-cost-of-ropes-1587115620/1#

n = 4
arr[] = {4, 3, 2, 6}
Output: 
29
Explanation:
For example if we are given 4
ropes of lengths 4, 3, 2 and 6. We can
connect the ropes in following ways.
1) First connect ropes of lengths 2 and 3.
Now we have three ropes of lengths 4, 6
and 5.
2) Now connect ropes of lengths 4 and 5.
Now we have two ropes of lengths 6 and 9.
3) Finally connect the two ropes and all
ropes have connected.
Total cost for connecting all ropes is 5
+ 9 + 15 = 29. This is the optimized cost
for connecting ropes. Other ways of
connecting ropes would always have same
or more cost. For example, if we connect
4 and 6 first (we get three strings of 3,
2 and 10), then connect 10 and 3 (we get
two strings of 13 and 2). Finally we
connect 13 and 2. Total cost in this way
is 10 + 13 + 15 = 38.

1. If we have 4 ropes of size 2,3,4,6.
2. Start by connecting the smallest 2 ropes 2+3 , cost till now =5, now we have 3 ropes of length 4,5,6.
3. Connect smallest 2 ropes 4+5, cost=cost+9=5+9, now 2 ropes of length 9 and 6.
4. Coonect soct = 5+9+15, now single rope of length 15 work done.

Time:O(nlogn), Space:O(n)

long long minCost(long long arr[], long long n) {
        // Your code here
        if(n==0 || n==1)
        {
            return 0;
        }
        
        
        priority_queue<long long, vector<long long>,greater<long long>> q;
        
        for(long long i=0;i<n;i++)
        {
            q.push(arr[i]);
        }
        
        long long cost=0;
        
        while(!q.empty() && q.size()>1)
        {
            long long a=q.top();
            q.pop();
            long long b=q.top();
            q.pop();
            long long sum=a+b;
            q.push(sum);
            cost=cost+sum;
            //cout<<a<<" "<<b<<" "<<sum<<" "<<cost<<"\n";
        }
        
        //cout<<q.top();
        
        return cost;
    }
