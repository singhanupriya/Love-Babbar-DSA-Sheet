https://www.geeksforgeeks.org/sliding-window-maximum-maximum-of-all-subarrays-of-size-k/
https://www.youtube.com/watch?v=xFJXtB5vSmM


1. We need max of every subarray of size k, we need to use some DS to store elements of a subarray.
2. We use deque, who front will contain the max of every subarray
3. While pushing an element in dequeu:
       - If u have an element at the back which is smaller than the element to be pushed x, it will never be an ans as along as x is in sub-array, pop from back all elements smaller than x.
       - if u have elements at the back > x, push x, bcoz once they go out of the subarray, x is a possible candiate
4. Once u reach the window, front of deque will be max of that sub array, slide, if arr[i]=q.front() pop it
5. j++

Time:O(N), Space:O(N)


#include<iostream>
#include<deque>
#include<vector>

using namespace std;


void maxsub(int arr[],int n, int k)
{
	deque<int> q;
	
	int i=0,j=0;
	vector<int> ans;
	
	while(j<n)
	{
		if(q.empty() || q.back()>=arr[j])
		{
			q.push_back(arr[j]);
		}
		else
		{
			while(!q.empty() && q.back()<arr[j])
			{
				q.pop_back();
			}
			q.push_back(arr[j]);
		}
		if(j-i+1 ==k )
		{
			ans.push_back(q.front());
			
			if(arr[i]==q.front())
			{
				q.pop_front();
			}
			i++;
		}
		j++;
	}
	
	for(int i=0;i<ans.size();i++)
	{
		cout<<ans[i]<<" ";
	}
	
	
	
}


int main()
{
	int arr[] = { 12, 1, 78, 90, 57, 89, 56 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3;
    maxsub(arr,n,k);
	
	return 0;
}


Method 2-

vector<int> max_of_subarrays(vector<int> nums, int n, int k) {
        // your code here
        
        deque<int> q;
        
        vector<int> result;
        
        for(int i=0;i<k;i++)
        {
            while(!q.empty() && q.back()<nums[i])
            {
                q.pop_back();
            }
            q.push_back(nums[i]);
        }
        
        int i=0,j=k-1;
        
        while(j<nums.size())
        {
            result.push_back(q.front());
            
            if(!q.empty() && q.front()==nums[i])
            {
                q.pop_front();
            }
            i++;
            j++;
            while(!q.empty() && q.back()<nums[j])
            {
                q.pop_back();
            }
            q.push_back(nums[j]);
            
        }
        //result.push_back(q.front());
        return result;
    }
