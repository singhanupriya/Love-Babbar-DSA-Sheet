https://www.geeksforgeeks.org/sliding-window-maximum-maximum-of-all-subarrays-of-size-k/
https://www.youtube.com/watch?v=xFJXtB5vSmM


1. We need max of every subarray of size k, we need to use some DS to store elements of a subarray.
2. We use deque, who front will contain the max of every subarray
3. While pushing an element in dequeu:
       - If u have an element at the back which is smaller than the element to be pushed x, it will never be an ans as along as x is in sub-array, pop from back all elements smaller than x.
       - if u have elements at the back > x, push x, bcoz once they go out of the subarray, x is a possible candiate
4. Once u reach the window, front of deque will be max of that sub array, slide, if arr[i]=q.front() pop it
5. j++

Time:O(N), SPace:O(K)

IMP- Push indexes, dont push actual element

vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        // your code here
        
        deque<int> q; //push indexes
        
        for(int i=0;i<k;i++)
        {
            while(!q.empty() && arr[q.back()]<=arr[i])
            {
                q.pop_back();
            }
            q.push_back(i);
        }
        
        vector<int> ans;
        int j=k;
        
        
        while(j<n)
        {
            ans.push_back(arr[q.front()]);
            
            while(!q.empty() && q.front()<=j-k) //to keep window size as k
            {
                q.pop_front();
            }
            
            while(!q.empty() && arr[q.back()]<=arr[j])
            {
                q.pop_back();
            }
            q.push_back(j);
            
            
            
            j++;
        }
        
        ans.push_back(arr[q.front()]);
            
            
            return ans;
        
    }
