
Similar to merge K sorted lists

int max(int a, int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    int min(int a, int b)
    {
        if(a<=b)
        {
            return a;
        }
        return b;
    }
    
    pair<int,int> findSmallestRange(int KSortedArray[][N], int n, int k)
    {
          //code here
          
          //<value,<arrNo,index>>
          priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>, greater<pair<int,pair<int,int>>>> pq;
          
          int minAns;
          int maxAns;
          int minRange=INT_MAX;
          int maxElement=INT_MIN;
          int minElement=INT_MAX;
          
          //create a min heap of size k
          for(int i=0;i<k;i++)
          {
              pq.push(make_pair(KSortedArray[i][0],make_pair(i,0)));
              maxElement=max(maxElement,KSortedArray[i][0]);
          }
          
          //we need to run the loop till any one array finishes
          while(1)
          {
              pair<int,pair<int,int>> pqTop=pq.top();
              minElement=pqTop.first;  //min element
              int arrNo=pqTop.second.first;
              int arrIndex=pqTop.second.second;
              pq.pop();
              
              if(minRange> maxElement-minElement)
              {
                  minRange=maxElement-minElement;
                  maxAns=maxElement;
                  minAns=minElement;
              }
              
              if(arrIndex+1 < n)
              {
                  pq.push(make_pair(KSortedArray[arrNo][arrIndex+1],make_pair(arrNo,arrIndex+1)));
                  maxElement=max(maxElement,KSortedArray[arrNo][arrIndex+1]);
              }
              else
              {
                  break;
                  //one array has eneded
              }
              
          }
          
          return make_pair(minAns,maxAns);
    }
