https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/

1. Logic -> find sum of all continous subarray, and find k largest ->similar to k largest in an unsorted array using heap
2. Find sum of all continous subarray and store in array. Time-O(n^2), space:O(N^2)
3a. Option 1 - sort and find k lagest, Time:O(N^2log(N^2)), Space:O(N^2)
3b. Option 2- use a min heap of size k, the top should be the kth largest means all remaining elements must be greater than the top.
              Find the sum, if q.size()<k, push in q else if (q.top()<x)) pop and push x. 
              Time:o(n^2 LOG K), Space:O(K)
3c Option 3- use max heap, store all elements in max heap using heapify and delete (k-1) times.
            Time:O(N^2 + klog(n^2)), Space:O(n^2)


#include<iostream>
#include<queue>

using namespace std;

void klargest(int arr[], int n,int k)
{
	priority_queue<int,vector<int>,greater<int>> q;
	
	for(int i=0;i<n;i++)
	{
		int sum=0;
		for(int j=i;j<n;j++)
		{
			sum=sum+arr[j];
			
			if(q.size()<k)
			{
				q.push(sum);
			}
			else
			{
				if(q.top()<sum)
				{
					q.pop();
					q.push(sum);
				}
			}
		}
	}
	cout<<q.top();
}


int main()
{
    int a[] = {20, -5, -1};
    int n = sizeof(a) / sizeof(a[0]);
    int k = 3;
 
    // calls the function to find out the
    // k-th largest sum
    klargest(a, n, k);
    return 0;
}
