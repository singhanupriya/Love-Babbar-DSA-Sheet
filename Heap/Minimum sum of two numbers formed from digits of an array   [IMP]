
https://practice.geeksforgeeks.org/problems/minimum-sum4058/1#

Logic- to get min sum, we need min nos.
1. Sort the array, min no should be most significant bit, next min should be next MSB..
2. Here, min will be MSB of 1st num, 2nd min will be MSB of 2nd num, 3rd min will be 2nd MSB of 1st num and no on.

Time:O(nlogn), Space:O(1)

If no is small, u can add as intergar

string solve(int arr[], int n) {
        // code here
        sort(arr,arr+n);
        
        int a=0;
        int b=0;
        
        for(int i=0;i<n;i++)
        {
            if(i%2==0)
            {
                a=a*10 + arr[i];
            }
            else
            {
                b=b*10 + arr[i];
            }
        }
        int sum=a+b;
        
        return to_string(sum);
    }
    
    
  If number is very long eg 10^7, it can't be stored in int or long long int, u have to use strng. Convert the numbers to string and find sum of strings.
  
  
  public:
    void swap(string& a, string& b)
    {
        string temp=a;
        a=b;
        b=temp;
    }
    
    string sum_str(string num1,string num2)
    {
        string ans="";
        
        if(num1.length() > num2.length())  // num2 sould be greater
        {
            swap(num1,num2);
            
            
        }
        
        reverse(num1.begin(),num1.end());
        reverse(num2.begin(),num2.end());
        
        int carry=0;
        int n1=num1.length();
        int n2=num2.length();
        
        for(int i=0;i<n1;i++)  //num1 ends as num2 is longer
        {
            int  temp=(num1[i]-'0')+(num2[i]-'0')+carry;
            ans.push_back(temp%10+'0');
            carry=temp/10;
        }
        
        for(int i=n1;i<n2;i++)
        {
            int temp=carry+(num2[i]-'0');
            ans.push_back(temp%10 + '0');
            carry=temp/10;
        }
        
        if(carry>0)
        {
            ans.push_back(carry+'0');
        }
        
        reverse(ans.begin(),ans.end());
        return ans;
        
    }

    string solve(int arr[], int n) {
        // code here
        
        string num1="";
        string num2="";
        
        sort(arr,arr+n);
        
        for(int i=0;i<n;i++)
        {
            if(i%2==0)
            {
                int num=arr[i];
                if(num==0 && num1.length()==0)  //if the element is 0 and string is empty, dn't add 0 to the sart of the strng
                {
                    continue;
                }
                num1=num1+ to_string(arr[i]);
            }
            else
            {
                int num=arr[i];
                if(num==0 && num2.length()==0)  //if the element is 0 and string is empty, dn't add 0 to the sart of the strng
                {
                    continue;
                }
                num2=num2+ to_string(arr[i]);
            }
        }
        //cout<<num1<<" "<<num2<<"\n";
        
        return sum_str(num1,num2);
    }
};
