https://www.geeksforgeeks.org/heap-sort/

Increasing Order

1. Create max heap.
2. Swap leaf nodes with the root as root will have max elements, this was max elements will get their position, make heap again.

Time:O(nlogn)


#include<iostream>

using namespace std;

void swap(int& a,int& b)
{
	int temp=a;
	a=b;
	b=temp;
}

void heap(int arr[], int n, int i)
{
	int largest=i;
	int l=2*i+1;
	int r=2*i+2;
	
	if(l<n && arr[l]>arr[largest])
	{
		largest=l;
	}
	
	if(r<n && arr[r]>arr[largest])
	{
		largest=r;
	}
	
	if(largest!=i)
	{
		swap(arr[i],arr[largest]);
		heap(arr,n,largest);
	}
}

void sort(int arr[],int n)
{
	for(int i=n/2-1;i>=0;i--)
	{
		heap(arr,n,i);
	}
	
	for(int i=n-1;i>=0;i--)
	{
		swap(arr[i],arr[0]);
		heap(arr,i,0);
	}
}

int main()
{
	
	int arr[] = { 12, 11, 13, 5, 6, 7 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
 	sort(arr,n);
 	
 	for(int i=0;i<n;i++)
 	{
 		cout<<arr[i]<<" ";
	 }
	
	return 0;
}


Decreasing order


#include<iostream>

using namespace std;

void swap(int& a,int& b)
{
	int temp=a;
	a=b;
	b=temp;
}

void heap(int arr[], int n, int i)
{
	int largest=i;
	int l=2*i+1;
	int r=2*i+2;
	
	if(l<n && arr[l]<arr[largest])
	{
		largest=l;
	}
	
	if(r<n && arr[r]<arr[largest])
	{
		largest=r;
	}
	
	if(largest!=i)
	{
		swap(arr[i],arr[largest]);
		heap(arr,n,largest);
	}
}

void sort(int arr[],int n)
{
	for(int i=n/2-1;i>=0;i--)
	{
		heap(arr,n,i);
	}
	
	for(int i=n-1;i>=0;i--)
	{
		swap(arr[i],arr[0]);
		heap(arr,i,0);
	}
}

int main()
{
	
	int arr[] = { 12, 11, 13, 5, 6, 7 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
 	sort(arr,n);
 	
 	for(int i=0;i<n;i++)
 	{
 		cout<<arr[i]<<" ";
	 }
	
	return 0;
}
