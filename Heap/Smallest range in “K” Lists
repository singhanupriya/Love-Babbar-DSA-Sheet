https://practice.geeksforgeeks.org/problems/find-smallest-range-containing-elements-from-k-lists/1

Idea- If we could merge all k sorted arrays and then find the min range that contains elements from each array. --->similar to merge k sorted arrays
1. Create a min heap <val, <arr_no,arr_index>> push all first elements from all arrays into the min heap, find max_elemtn here and min ele(top), set range.
2. POp the smallest element and insert into min heap, find new max and range.
3. Continue till one array ends i.e. hap.size()==k, ans=range.

Time:O(n*k logk)  --> always k elements in heap, n*k->total elements
Space:O(k)


pair<int,int> findSmallestRange(int arr[][N], int n, int k)
    {
          //code here
          
          pair<int,int> ans;
          priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> q;
          int min_range=INT_MAX;
          int max=INT_MIN;
          
          for(int i=0;i<k;i++)
          {
              q.push(make_pair(arr[i][0],make_pair(i,0)));
              if(max<arr[i][0])
              {
                  max=arr[i][0];
              }
          }
          
          while(q.size()==k)
          {
              pair<int,pair<int,int>> temp=q.top();
              
              q.pop();
              
              int val=temp.first;
              pair<int,int> p=temp.second;
              
              if(min_range > max-val)
              {
                  min_range=max-val;
                  ans.first=val;
                  ans.second=max;
              }
              
              int arr_no=p.first;
              int arr_index=p.second;
              int next_index=arr_index+1;
              
              if(next_index<n)
              {
                  q.push(make_pair(arr[arr_no][next_index],make_pair(arr_no,next_index)));
                  if(max<arr[arr_no][next_index])
                  {
                      max=arr[arr_no][next_index];
                  }
                  
              }
              
          }
          
          return ans;
          
          
    }
