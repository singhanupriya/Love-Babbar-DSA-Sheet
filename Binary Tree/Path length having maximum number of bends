https://www.geeksforgeeks.org/path-length-maximum-number-bends/

1. Start with left and right subtree of root with dir 'l' and 'r', everytime if u chnage direction increment bend
2. When u reach leaf node compare max bend

Time:O(N), SPace:O(H)

#include <iostream>

using namespace std;

struct Node {
    int key;
    struct Node* left;
    struct Node* right;
};
 
// Utility function to create a new node
struct Node* newNode(int key)
{
    struct Node* node = new Node();
    node->left = NULL;
    node->right = NULL;
    node->key = key;
 
    return node;
}

void solve(Node* root, int bend, char dir, int currLength, int& len, int& maxBend)
{
    if(!root)
    {
        return;
    }
    
    if(!root->left && !root->right)
    {
        if(maxBend<bend)
        {
            maxBend=bend;
            len=currLength;
        }
        
    }
    else
    {
        if(dir=='l')
        {
            //u can continue to move to left or right
            solve(root->left,bend,'l',currLength+1,len,maxBend);
            solve(root->right,bend+1,'r',currLength+1,len,maxBend);
            
        }
        else
        {
            //u can continue to move to right or left
            solve(root->right,bend,'r',currLength+1,len,maxBend);
            solve(root->left,bend+1,'l',currLength+1,len,maxBend);
        }
        
        
    }
    
    
}

int findMaxBends(Node* root)
{
    
    //find total num of nodes in that path and return -1 as we want the length
    
    if(!root)
    {
        return 0;
    }
    
    if(!root->left && !root->right)
    {
        return 0;
    }
    
    int len=0,maxBend=0; 
    
    //try for both left and right subtree
    
    solve(root->left,0,'l',1,len,maxBend);
    
    solve(root->right,0,'r',1,len,maxBend);
    
    len++; //add root;
    
    return len;
    
    
    
    
    
}


int main()
{
    Node* root = newNode(10);
    root->left = newNode(8);
    root->right = newNode(2);
    root->left->left = newNode(3);
    root->left->right = newNode(5);
    root->right->left = newNode(2);
    root->right->left->right = newNode(1);
    root->right->left->right->left = newNode(9);
 
    cout << findMaxBends(root) -1 ; //as we need to find edge length

    return 0;
}
