https://www.geeksforgeeks.org/find-largest-subtree-sum-tree/

Use sum tree method

Time:O(N), Space:O(N)


// C++ program to find largest subtree
// sum in a given binary tree.
#include <bits/stdc++.h>
using namespace std;

// Structure of a tree node.
struct Node {
	int key;
	Node *left, *right;
};

// Function to create new tree node.
Node* newNode(int key)
{
	Node* temp = new Node;
	temp->key = key;
	temp->left = temp->right = NULL;
	return temp;
}

int max(int a,int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}

int sum(Node* root,int& ans)
{
    if(!root)
    {
        return 0;
    }
    
    if(!root->left && !root->right)
    {
        ans=max(ans,root->key);
        return root->key;
    }
    
    int val=root->key + sum(root->left,ans) + sum(root->right,ans);
    ans=max(ans,val);
    return val;
    
}

int findLargestSubtreeSum(Node* root)
{
    if(!root)
    {
        return 0;
    }
    int ans=INT_MIN;
    sum(root,ans);
    return ans;
}

// Driver function
int main()
{
	/*
			1
			/ \
			/	 \
		-2	 3
		/ \	 / \
		/ \ / \
		4	 5 -6	 2
	*/

	Node* root = newNode(1);
	root->left = newNode(-2);
	root->right = newNode(3);
	root->left->left = newNode(100);
	//root->left->right = newNode(5);
	root->right->left = newNode(5);
	root->right->right = newNode(6);

	cout << findLargestSubtreeSum(root);
	return 0;
}
