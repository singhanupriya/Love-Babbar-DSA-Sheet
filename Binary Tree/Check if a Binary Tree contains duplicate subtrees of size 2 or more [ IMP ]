https://practice.geeksforgeeks.org/problems/duplicate-subtree-in-binary-tree/1

1. Convert every root->data as string.
2. If !root return "$"-->edge case, if leaf node, convert to string and string.
3. every parent node= parent data+ left+right store it in map, basically store every subtree as a string in map.
3. If occurence of any string in map>=2, duplicate

Time:O(N), Space:O(N)

class Solution {
  public:
    /*This function returns true if the tree contains 
    a duplicate subtree of size 2 or more else returns false*/
    unordered_map<string,int> m;
    
    string solve(Node* root)
    {
        if(!root)
        {
            return "$";
        }
        string s="";
        
        if(!root->right && !root->left)
        {
            s=to_string(root->data);
            return s;
        }
        
        s=s+to_string(root->data);
        s=s+solve(root->left);
        s=s+solve(root->right);
        
        m[s]++;
        return s;
    }
    
    int dupSub(Node *root) {
         // code here
         solve(root);
         for(auto i:m)
         {
             if(i.second>=2)
             {
                 return true;
             }
         }
         
         return false;
    }
    
