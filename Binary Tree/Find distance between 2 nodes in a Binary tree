https://practice.geeksforgeeks.org/problems/min-distance-between-two-given-nodes-of-a-binary-tree/1#

Time:O(N), Space:O(H)

1. Find LCA(n1,n2), if LCA exists means both nodes present, else not.
2. If LCA exists ans=dist(lca,n1) + dist(lca,n2)

class Solution{
    public:
    /* Should return minimum distance between a and b
    in a tree with given root*/
    
    Node* lca(Node* root, int a,int b)
    {
        if(!root)
        {
            return NULL;
        }
        
        if(root->data==a || root->data==b)
        {
            return root;
        }
        
        Node* left=lca(root->left,a,b);
        Node* right=lca(root->right,a,b);
        
        if(left && right)
        {
            return root;
        }
        
        if(left)
        {
            return left;
        }
        
        if(right)
        {
            return right;
        }
        
        return NULL;
        
    }
    
    int dist(Node* root,int a,int h)  //we go here only if lca exists means both nodes presnt
    {
        if(!root)
        {
            return -1;
        }
        
        if(root->data==a)
        {
            return h;
        }
        
        int left=dist(root->left,a,h+1);
        if(left==-1)
        {
            int right=dist(root->right,a,h+1);
            return right;
        }
        return left;
    }
    
    int findDist(Node* root, int a, int b) {
        // Your code here
        
        Node* lca_node=lca(root,a,b);
        if(!lca_node)
        {
            return -1;
        }
        
        int d1=dist(lca_node,a,0);
        int d2=dist(lca_node,b,0);
        
        return d1+d2;
    }
};
