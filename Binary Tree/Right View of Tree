https://practice.geeksforgeeks.org/problems/right-view-of-binary-tree/1#


Time:O(N), Space:O(H)


Using DFS:

void dfs(Node* root, int& maxLevel, int level, vector<int>& ans)
    {
        if(!root)
        {
            return;
        }
        if(maxLevel < level)
        {
            ans.push_back(root->data);
            maxLevel=level;
        }
        
        dfs(root->right,maxLevel,level+1,ans);
        dfs(root->left,maxLevel,level+1,ans);
    }
    
    vector<int> rightView(Node *root)
    {
       // Your Code here
       
       vector<int> result;
       
       if(!root)
       {
           return result;
       }
       
       int maxLevel=0;
       
       dfs(root,maxLevel,1,result);
       return result;
    }


Using BFS:

class Solution
{
    public:
    //Function to return list containing elements of right view of binary tree.
    vector<int> rightView(Node *root)
    {
       // Your Code here

       vector<int> res;

       if(root==NULL)
       {
           return res;
       }

       queue<Node*> q;

       q.push(root);
       int level=0;

       Node* temp;
       while(!q.empty())
       {
           int l=q.size();
           for(int i=0;i<l;i++)
           {
               temp=q.front();
               q.pop();

               if(temp->left)
               {
                   q.push(temp->left);
               }

               if(temp->right)
               {
                   q.push(temp->right);
               }
           }
           res.push_back(temp->data);
           level++;
       }

       return res;
    }
};
