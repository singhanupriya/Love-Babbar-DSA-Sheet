https://practice.geeksforgeeks.org/problems/find-maximum-equal-sum-of-three-stacks/1/

1. We need to return the max equal sum.
2. First check the sum of all stacks if same return it.
3. Run an infinite loop and pop the top of stack which has max sum and check again, in this process if any of the stacks become empty, not possible

Time:O(N1+N2+N3)
Space:O(1)

public:
    int maxEqualSum(int N1,int N2,int N3,vector<int> &S1,vector<int> &S2,vector<int> &S3){
        
        int sum1=0,sum2=0,sum3=0;
        
        for(int i=0;i<N1;i++)
        {
            sum1+=S1[i];
        }
        
        for(int i=0;i<N2;i++)
        {
            sum2+=S2[i];
        }
        
        for(int i=0;i<N3;i++)
        {
            sum3+=S3[i];
        }
        
        if(sum1==sum2==sum3)
        {
            return sum1;
        }
        
        //u need to find the max equal sum, if sum is same return
        //else remove the top of stack which has max sum
        
        int top1=0,top2=0,top3=0;
        
        while(1)
        {
            //if any of the stack is empty
            if(top1==N1 || top2==N2 || top3==N3)
            {
                return 0;
            }
            
            //if sums are equal return 
            if(sum1==sum2 && sum1==sum3)
            {
                return sum1;
            }
            
            //as we need max equal sum, if the sums are not equal
            //we will pop the top of stack with max sum and check ahain
            if(sum1>=sum2 && sum1>=sum3)
            {
                sum1-=S1[top1];
                top1++;
                
            }
            else if(sum2>=sum1 && sum2>=sum3)
            {
                sum2-=S2[top2];
                top2++;
            }
            else
            {
                sum3-=S3[top3];
                top3++;
            }
        }
        
    }
};
