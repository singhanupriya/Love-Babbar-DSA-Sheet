https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1

1. U want to have max of meetings, logic- have shorter meeting so that u can have max
2. Sort acc to the end times
3. If start of next meeting > end of prev meeting, add that meeting

//When writing ur compartor fn for vector sorting, V.V.IMP- pass by reference so that pass by value doesnt happen, saves time

Time:O(N LOG N + N). -> sorting + traversal
Space:O(N)


// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
    public:
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    
    
    //V.V.IMP- pass by reference so that pass by value doesnt happen, saves time
    static bool comp(vector<int> &a,vector<int> &b) //static so that u dont have to create an obj to use this fn
    {
        return a[1]<b[1];
    }
    
    int maxMeetings(int start[], int end[], int n)
    {
        // Your code here
        
        vector<vector<int>> meet;
        for(int i=0;i<n;i++)
        {
            vector<int> temp;
            temp.push_back(start[i]);
            temp.push_back(end[i]);
            meet.push_back(temp);
        }
        
        sort(meet.begin(),meet.end(),comp);
        
        int count=1;
        int m_end=meet[0][1];
        
        for(int i=1;i<n;i++)
        {
            if(meet[i][0]>m_end)
            {
                count++;
                m_end=meet[i][1];
            }
        }
        
        return count;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int start[n], end[n];
        for (int i = 0; i < n; i++) cin >> start[i];

        for (int i = 0; i < n; i++) cin >> end[i];

        Solution ob;
        int ans = ob.maxMeetings(start, end, n);
        cout << ans << endl;
    }
    return 0;
}  // } Driver Code Ends
