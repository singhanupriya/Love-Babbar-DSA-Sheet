https://www.geeksforgeeks.org/fractional-knapsack-problem/


https://www.youtube.com/watch?v=F_DDzYnxO14

VALUE=[60,100,120]
WEIGHT=[10,20,30]
value/wt=[6,5,4]. ->this can be decimal also so keep in mind to take double.


1. U are to put wts in the bag in such a way that it doesnt exceed the limit W and value is max possible, u can take fraction units.
2. Sort in decreasing order of value/weight i.e. value per unit of wt, put the unit which has max value/wt first.

Add 60 value first, WT=10 then add 100 wt=30 then add 20kgs out of 30 and its value=80, total value=60+100+80=240.

Time- O(nLOGn + N) SORTING + TRAVERSAL
SPACE:O(1)


class Solution
{
    public:
    
    static bool comp(struct Item a, struct Item b) //make it static as we want to use this fn without creating an object 
    //else define it outrside the class
    {
        double r1=double(a.value)/double(a.weight);
        double r2=double(b.value)/double(b.weight);
        
        return r1>r2; //desc order
    }
    
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        // Your code here
        
        sort(arr,arr + n,comp);
        
        double ans=0.0;
        
        for(int i=0;i<n;i++)
        {
            if(arr[i].weight<=W)
            {
                ans=ans+ arr[i].value;
                W=W-arr[i].weight;
            }
            else
            {
                //u already have the updated weight here, the remaining weight that canb be added.
                ans+=arr[i].value * double(W) / double(arr[i].weight);  
                //imp to put double, quotient can be in fractional, will not give accurate ans
                
                break;  // once u have reached the limit, no need to check ahead
            }
        }
        
        return ans;
        
    }
        
};
