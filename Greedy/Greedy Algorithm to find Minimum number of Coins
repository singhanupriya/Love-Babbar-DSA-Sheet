https://practice.geeksforgeeks.org/problems/choose-and-swap0531/1
https://www.youtube.com/watch?v=NhnsINajZRA

Here we have to replace and not swap

eg- ccad -> aacd, all occ of 'c' are replaced by 'a' and all occ of 'a' are replaced by c.
We have to do this atmost once (0 or 1 time) to get lexicographically smallest string.

adbca -> adbca, no smaller char that present at index 0 i.e. 'a' in the string. move ahead, 'a' is smaller than 'd' but if u replace 'd' with 'a' it becomes
dabcd (wrong ans), when we are on 'd' we will find the next smaller after 'a' as 'a' has already occured before 'd'.
Ans- abdca

Logic - 
1. Store first occu of every char in string in an array, first occ only so that we can know if it comes before or after a particular char in the string.
2. start traversing the string from index 0, if u find any char smaller then the char at index '0' in the check array that occurs after it in the string array, then u replace else that is the smallest.
3. Once u have found such pair, break as we need to do this at max 1.

Time:O(N^2), Space:O(1) 


public:
    string chooseandswap(string str){
        // Code Here
        
        int check[26];
        for(int i=0;i<26;i++)
        {
            check[i]=-1;
        }
        
        int n=str.length();
        
        //store first occ of every char in check arr
        for(int i=0;i<n;i++)
        {
            if(check[str[i]-'a']==-1)
            {
                check[str[i]-'a']=i;
            }
        }
        
        int i=0,j=0;
        
        for(i=0;i<n;i++)
        {
            bool flag=false;
            for(j=0;j<str[i]-'a';j++) //check for any chars smaller than the char in string occuring before it in the check array
            {
                if(check[j]>check[str[i]-'a']) //if the smaller char occurs after it in the string then only we can replace
                {
                    flag=true;
                    break;
                }
            }
            if(flag) //as we need to do it only once
            {
                break;
            }
        }
        
        if(i<n) //means we can do atleast once, we need to replace the chars
        {
            char replaces=char(j+'a');
            char toBeReplaced= str[i];
            
            for(int i=0;i<n;i++)
            {
                if(str[i]==toBeReplaced)
                {
                    str[i]=replaces;
                }
                else if(str[i]==replaces)
                {
                    str[i]=toBeReplaced;
                }
            }
        }
        
        
        return str;
    }
    
};


Method 1: Backtracking O(N^m)

#include <iostream>
#include<vector>
#include<climits>

using namespace std;

int min(int a, int b)
{
    if(a<=b)
    {
        return a;
    }
    return b;
}

int solve(int N,vector<int>& coins,int m,vector<int> temp,vector<int>& ans)
    {
        if(m==0 || N==0)
        {
            if(ans.size()>temp.size())
            {
                ans=temp;
            }
            
            return 0;
        }
        
        
        
        int result=1000000009;
        
        for(int index=0;index<m;index++)
        {
            int value=1000000009;
            
            if(coins[index]<=N)
            {
                temp.push_back(coins[index]);
                value=1+ solve(N-coins[index],coins,m, temp,ans);
                temp.pop_back();
                
                if(result > value)
                {
                    result=value;
                    
                }
               
            }
        }
        
        return result;
        
        
        
        
        
        
    }
    
    vector<int> minPartition(int N)
    {
        // code here
        
        vector<int> coins={ 2,3,4,10,5 };
        int m=coins.size();
        vector<int> ans(5,0);
        vector<int> temp;
        solve(N,coins,m,temp,ans);
        
        return ans;
        
       
        
        
    }


int main()
{
    
    
    vector<int> ans=minPartition(20);
    
    for(int i=0;i<ans.size();i++)
    {
        cout<<ans[i]<<" ";
    }
    
    

    return 0;
}


Method 2: Greedy Time:O(N)

WON'T WORK FOR ALL DENOMITAIUONS HENCE USE DP

 static bool comp(int& a, int& b)
    {
        return a>b;
    }

    vector<int> minPartition(int N)
    {
        // code here
        
        vector<int> coins={ 1, 2, 5, 10, 20, 50, 100, 200, 500, 2000 };
        
        int n=coins.size();
        sort(coins.begin(),coins.end(),comp); //sorted in desc order
        
        vector<int> ans;
        
        for(int i=0;i<n;i++)
        {
            while(N>=coins[i])
            {
                N=N-coins[i];
                ans.push_back(coins[i]);
            }
        }
        
        return ans;
        
        
    }
