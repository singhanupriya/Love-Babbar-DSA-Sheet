https://www.geeksforgeeks.org/sort-a-linked-list-of-0s-1s-or-2s/

Time:O(n), Space:O(1)

Without changing links:
1. Traverse LL, count no of zeros, one and twos.
2. Traverse again, till no of zero's change the value of node to 0, till 1 change to 1, same for 2.

Node* segregate(Node *head) {
        
        // Add code here
        
        int one=0;
        int zero=0;
        int two=0;
        
        Node* p=head;
        
        while(p!=NULL)
        {
            if(p->data==0)
            {
                zero++;
            }
            else if(p->data==1)
            {
                one++;
            }
            else
            {
                two++;
            }
            p=p->next;
        }
        
        
        p=head;
        int i=0;
        
        while(i<zero)
        {
            p->data=0;
            p=p->next;
            i++;
        }
        i=0;
        
        while(i<one)
        {
            p->data=1;
            p=p->next;
            i++;
        }
        i=0;
        
        while(i<two)
        {
            p->data=2;
            p=p->next;
            i++;
        }
        
        return head;
        
        
    }
    
    https://www.geeksforgeeks.org/sort-linked-list-0s-1s-2s-changing-links/
    
    Changing link
    
    1. Create dummy heads for 0,1,2.
    2. Traverse LL, attach 0 behind 0, 1->1, 2->2.
    3. Link them.
    4. Delete dummy nodes
    
    Time:O(n), Space:O(1)
    
    
    public:
    //Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node *head) {
        
        // Add code here
        
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        
        Node* dummy_0=new Node(0);
        Node* dummy_1=new Node(0);
        Node* dummy_2=new Node(0);
        
        Node* p=dummy_0;
        Node* q=dummy_1;
        Node* r=dummy_2;
        
        Node* temp=head;
        
        while(temp!=NULL)
        {
            if(temp->data==0)
            {
                p->next=temp;
                p=p->next;
            }
            else if(temp->data==1)
            {
                q->next=temp;
                q=q->next;
            }
            else{
                r->next=temp;
                r=r->next;
            }
            
            temp=temp->next;
        }
        
        Node* new_head=NULL;
        
        if(dummy_0->next==NULL)
        {
            if(dummy_1->next)
            {
                new_head=dummy_1->next;
            }
            else
            {
                new_head=dummy_2->next;
            }
        }
        
        new_head=dummy_0->next;
        
        if(dummy_1->next)
        {
            p->next=dummy_1->next;
            if(dummy_2->next)
            {
                q->next=dummy_2->next;
                r->next=NULL;
            }
            else
            {
                q->next=NULL;
            }
            
        }
        else
        {
            if(dummy_2->next)
            {
                p->next=dummy_2->next;
                r->next=NULL;
            }
            else
            {
                p->next=NULL;
            }
            
            
        }
        
        delete(dummy_0);
        delete(dummy_1);
        delete(dummy_2);
        
        
        
        return new_head;
        
    }
};
