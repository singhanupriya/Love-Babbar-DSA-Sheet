https://www.youtube.com/watch?v=1KRmCzBl_mQ&t=31s
https://www.geeksforgeeks.org/difference-between-prims-and-kruskals-algorithm-for-mst/

1. Sort all the edges in increasing order of thier weight.
2. Greedily pick smaller weight edges (as we need minimum) and check if they are in the same component using disjoint set, if not add that edge as we do not want a cycle.
  Connecting two nodes of the same component will form a cycle violating spanning tree.
3. Use findParent to check if the nodes belong to the same component.


Time:(ElogE+ElogV)
O(ElogE) or O(ElogV). Sorting of edges takes O(ELogE) time. After sorting, we iterate through all edges and apply the find-union algorithm.
The find and union operations can take at most O(LogV) time. So overall complexity is O(ELogE + ELogV) time. 
The value of E can be at most O(V2), so O(LogV) is O(LogE) the same. Therefore, the overall time complexity is O(ElogE) or O(ElogV)

Space:O(N)

#include <iostream>
#include<vector>
#include<algorithm>

using namespace std;

struct node{
  int u;
  int v;
  int wt;
  
  node(int first, int second,int third)
  {
      u=first;
      v=second;
      wt=third;
  }
};

bool comp(node a, node b){
    return a.wt<b.wt;
}

int findParent(int u, vector<int>& parent)
{
    if(u==parent[u])
    {
        return u;
    }
    
    return parent[u]=findParent(parent[u],parent);
}

void unionP(int u, int v, vector<int>& parent, vector<int>& rank)
{
    u=findParent(u,parent);
    v=findParent(v,parent);
    
    if(rank[u]>rank[v])
    {
        parent[v]=u;
    }
    else if(rank[u]<rank[v])
    {
        parent[u]=v;
    }
    else
    {
        parent[u]=v;
        rank[v]++;
    }
}

int krushkal(vector<node>& edges, int N)
{
    int noEdges=edges.size();
    sort(edges.begin(),edges.end(),comp);
    
    vector<int> parent(N,-1);
    vector<int> rank(N,0);
    
    for(int i=0;i<N;i++)
    {
        parent[i]=i;
    }
    
    int minCost=0;
    for(int i=0;i<noEdges;i++)
    {
        int a=edges[i].u;
        int b=edges[i].v;
        if(findParent(a,parent)!=findParent(b,parent)) //belong to diff component
        {
            unionP(a,b,parent,rank);
            minCost+=edges[i].wt;
        }
    }
    
    return minCost;
    
}

int main()
{
    vector<node> edges;
    int N=6;
    edges.push_back(node(0,1,2));
    edges.push_back(node(3,4,9));
    edges.push_back(node(0,4,4));
    edges.push_back(node(0,3,1));
    edges.push_back(node(1,3,3));
    edges.push_back(node(2,3,5));
    edges.push_back(node(1,2,3));
    edges.push_back(node(2,5,8));
    edges.push_back(node(1,5,7));
    cout<<krushkal(edges,N);
    

    return 0;
}
