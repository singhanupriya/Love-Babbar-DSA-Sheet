https://www.youtube.com/watch?v=jdTnoCBSOVM


1. U want longest distance of all nodes from a src node. Create a dist matrix initialise with INT_MIN, d[src]=0
2. U will need some ordering to traverse the node, from a node, u can find longest dist from src to its adj nodes only if that node has been visisted. 
So we need an order in which the nodes should be visited so that all prev nodes of a node visisted before it, find topological sort.
3. All nodes in topo that are before src node that no path from src to that node so dist will remain INT for them.
4. Rem nodes 'u' that u keep visisting v->adj node, if d[u]+wt>d[v] then updte d[v].

Time:O(V+E), Space:O(V)




/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>
#include<queue>
#include<climits>

using namespace std;

void topo(vector<vector<int>>& adj, queue<int>& ans, int N)
{
    vector<bool> vis(N, false);
    vector<int> in(N,0);
    
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<adj[i].size();j++)
        {
            in[adj[i][j]]++;
        }
    }
    
    queue<int> q;
    
    for(int i=0;i<N;i++)
    {
        if(in[i]==0)
        {
            q.push(i);
            vis[i]=true;
        }
        
    }
    
    while(!q.empty())
    {
        int curr=q.front();
        q.pop();
        
        ans.push(curr);
        
        for(int i=0;i<adj[curr].size();i++)
        {
            in[adj[curr][i]]--;
            if(in[adj[curr][i]]==0 && vis[adj[curr][i]]==false)
            {
                q.push(adj[curr][i]);
                vis[adj[curr][i]]=true;
            }
        }
        
    }
    
}

void largest(vector<vector<int>>& graph,vector<vector<int>>& adj, int N,int src)
{
    vector<int> dist(N,INT_MIN);
    dist[src]=0;
    queue<int> q;
    
    topo(adj,q,N);
    
    while(!q.empty())
    {
        int curr=q.front();
        q.pop();
        
        if(dist[curr]!=INT_MIN)   // all nodes in TS from scr
        {
            for(int i=0;i<adj[curr].size();i++)
            {
                if(dist[adj[curr][i]]<dist[curr]+graph[curr][adj[curr][i]])
                {
                    dist[adj[curr][i]]=dist[curr]+graph[curr][adj[curr][i]];
                }
            }
        }
    }
    
    for(int i=0;i<N;i++)
    {
        cout<<dist[i]<<" ";
    }
    
    
}

int main()
{
    int N=6;
    vector<vector<int>> edges={{0,1,5},{0,2,3},{1,3,6},{1,2,2},{2,4,4},{2,5,2},{2,3,7},{3,5,1},{3,4,-1},{4,5,-2}};
    
    vector<vector<int>> adj(N);
    vector<vector<int>> graph(N,vector<int>(N,INT_MAX));
    
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            graph[i][i]=0;
        }
    }
    
    for(int i=0;i<edges.size();i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        graph[edges[i][0]][edges[i][1]]=edges[i][2];
    }
    
   
    
    
    
    largest(graph,adj,N,1);

    return 0;
}
