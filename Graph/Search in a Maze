https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1#

Backtracking

Time:O(4^(N^2)), Space:O(N^2)


class Solution{
    public:
    
    
    void solve(vector<vector<int>> m,vector<vector<int>>& vis,vector<string>& ans,int i, int j, int dirx[], int diry[],string curr, string s,int n)
    {
        if(j==n-1 && i==n-1)
        {
            ans.push_back(curr);
            return;
        }
        
        for(int x=0;x<4;x++)
        {
            if(i+dirx[x]>=0 && i+dirx[x]<n && j+diry[x]>=0 && j+diry[x]<n && m[i+dirx[x]][j+diry[x]]==1 && vis[i+dirx[x]][j+diry[x]]==0)
            {
                vis[i][j]=1;
                solve(m,vis,ans,i+dirx[x],j+diry[x],dirx,diry,curr+s[x],s,n);
                vis[i][j]=0;
            }
        }
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        
        
        
        vector<vector<int>> vis(n,vector<int>(n,0));
        int dirx[]={1,0,0,-1};
        int diry[]={0,-1,1,0};
        string s="DLRU";
        
        vector<string> ans;
        
        if(m[0][0]==0 || m[n-1][n-1]==0)
        {
            return ans;
        }
        
        solve(m,vis,ans,0,0,dirx,diry,"",s,n);
        return ans;
    }
};

    
