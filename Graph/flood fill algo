
https://leetcode.com/problems/flood-fill/submissions/

Use BFS.
Time:O(M*N) -> worst case visit all cells
Space:O(M*N)

 vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        
        int rows=image.size();
        int cols=image[0].size();
        
        vector<vector<int>> ans(rows,vector<int> (cols,0));
        
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                ans[i][j]=image[i][j];
            }
        }
        
        vector<vector<int>> vis(rows,vector<int> (cols,0));
        
        int dirx[]={-1,1,0,0};
        int diry[]={0,0,-1,1};
        
        queue<pair<int,int>> q;
        q.push(make_pair(sr,sc));
        vis[sr][sc]=1;
        ans[sr][sc]=newColor;
        
        while(!q.empty())
        {
            
            pair<int,int> curr=q.front();
            q.pop();
            int i=curr.first;
            int j=curr.second;
            
            for(int x=0;x<4;x++)
            {
                if(i+dirx[x]>=0 && i+dirx[x]<rows && j+diry[x]>=0 && j+diry[x]<cols && vis[i+dirx[x]][j+diry[x]]==0 && image[i+dirx[x]][j+diry[x]]==image[i][j])
                {
                    q.push(make_pair(i+dirx[x],j+diry[x]));
                    vis[i+dirx[x]][j+diry[x]]=1;
                    ans[i+dirx[x]][j+diry[x]]=newColor;
                }
            }
            
            
        }
        
        return ans;
        
        
    }
    
