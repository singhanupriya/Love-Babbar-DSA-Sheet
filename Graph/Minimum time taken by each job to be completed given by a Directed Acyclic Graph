https://www.geeksforgeeks.org/minimum-time-taken-by-each-job-to-be-completed-given-by-a-directed-acyclic-graph/

1. Application of topological sort.
2. All nodes with 0 dependencies can be executed in 1 unit of time.
3. If u->v, if upon removng u, v can be executed next means it will take 1 unit more than u, time[v]=time[u]+1

Time:O(V+E), Space:O(V)


/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>
#include<queue>

using namespace std;

void solve(vector<vector<int>>& edges, int N)
{
    vector<vector<int>> adj(N);
    for(int i=0;i<edges.size();i++)
    {
        adj[edges[i][0]-1].push_back(edges[i][1]-1);
    }
    
    vector<int> in(N,0);
    
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<adj[i].size();j++)
        {
            in[adj[i][j]]++;
            
        }
        
    }
    
    
    queue<int> q;
    vector<bool> vis(N,false);
    
    //int times=1;
    
    vector<int> ans(N,0);
    
    for(int i=0;i<N;i++)
    {
        if(in[i]==0)
        {
            ans[i]=1;
            q.push(i);
            vis[i]=true;
        }
    }
    
    while(!q.empty())
    {
        int curr=q.front();
        q.pop();
        
        for(int i=0;i<adj[curr].size();i++)
        {
            in[adj[curr][i]]--;
            if(in[adj[curr][i]]==0 && vis[adj[curr][i]]==false)
            {
                ans[adj[curr][i]]=ans[curr]+1;
                q.push(adj[curr][i]);
                vis[adj[curr][i]]=true;
            }
        }
    }
    
    for(int i=0;i<N;i++)
    {
        cout<<ans[i]<<" ";
    }
    
}

int main()
{
    int N=10;
    vector<vector<int>> edges={{1,3},{1,4},{1,5},{2,3},{2,8},{2,9},{3,6},{4,6},{4,8},{5,8},{6,7},{7,8},{8,10}};
    solve(edges, N);
    

    return 0;
}
