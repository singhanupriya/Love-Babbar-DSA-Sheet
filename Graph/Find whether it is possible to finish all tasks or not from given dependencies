https://practice.geeksforgeeks.org/problems/prerequisite-tasks/1/#

1. use topological sort

Time:O(V+E), space:O(V+E)

bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    
	    // Code here
	    
	    vector<int> in(N,0);
	    vector<bool> vis(N, false);
	    
	    vector<vector<int>> adj(N);
	    
	    int edges=prerequisites.size();
	    for(int i=0;i<edges;i++)
	    {
	        adj[prerequisites[i].second].push_back(prerequisites[i].first);
	        in[prerequisites[i].first]++;
	    }
	    
	    queue<int> q;
	    int count=0;
	    
	    for(int i=0;i<N;i++)
	    {
	        if(in[i]==0 && !vis[i])
	        {
	            q.push(i);
	            count++;
	            vis[i]=true;
	        }
	    }
	    
	    while(!q.empty())
	    {
	        int curr=q.front();
	        q.pop();
	        
	        
	        for(int i=0;i<adj[curr].size();i++)
	        {
	            in[adj[curr][i]]--;
	                if(in[adj[curr][i]]==0 && !vis[adj[curr][i]])
	                {
	                    q.push(adj[curr][i]);
	                    count++;
	                    vis[adj[curr][i]]=true;
	                }
	            
	        }
	    }
	    
	    if(count==N)
	    {
	        return true;
	    }
	    return false;
	    
	}
};
