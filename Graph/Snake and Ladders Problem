https://www.youtube.com/watch?v=zWS2fCJGxmU

Imp points in the question-
1. starting from the bottom left of the board (i.e. board[n - 1][0]) i.e. from 1 reach n2 board[0][0]. The game ends when you reach the square n2.
2. Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].
This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.


1. we have to find the min number of steps needed to go to n2 from 1 ->BFS
2. Insert 1 in queue mark it as visited, push next 6 items that u can from one into q.
3. If u reach the dest, return steps , else find row and col and check where to move

Time:O(N^2), Space:O(n^2)

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<vector>
#include<queue>

using namespace std;


    
     void findCoordinates(int x, int n, int& row, int& col)
    {
        
        
        row=n- ((x-1)/n )-1;
        col=(x-1) % n;
        
        if((n % 2 == 1 && row%2 ==1) || (row%2==0 && n%2==0))
        {
            
            col=n-1-col;
        }
       
        
       
    }
    
    
   int snakesAndLadders(vector<vector<int>>& board) {
        
        
        int n=board.size();
        
        vector<vector<bool>> vis(n,vector<bool>(n,false));
        queue<pair<int,int>> q;
        
        
        q.push(make_pair(1,0));
        
        //<node,dist>
        
        vis[n-1][0]=true;
        
        while(!q.empty())
        {
            pair<int,int> temp=q.front();
            
            int steps=temp.second;
            int pos=temp.first;
            q.pop();
            
            if(pos==n*n)
            {
                return steps;
            }

             
                
            for(int i=1;i<=6;i++)
            {
                if(pos+i > n*n)
                {
                    break;
                }
                
                
                int r=0;
                    int c=0;
                    findCoordinates(pos+i,n,r,c);
                    
                    if(!vis[r][c])
                    {
                        if(board[r][c]==-1)
                        {
                            q.push(make_pair(pos+i,steps+1));
                        }
                        else
                        {
                            q.push(make_pair(board[r][c],steps+1));
                        }
                        vis[r][c]=true;
                        
                    }
                    
                    
                    
                    
                
            }
            
            
            
            
        }
        return -1;
    }

int main()
{
    
    vector<vector<int>> board {{-1,-1,-1,-1,-1,-1},
                                {-1,-1,-1,-1,-1,-1},
                                {-1,-1,-1,-1,-1,-1},
                                {-1,35,-1,-1,13,-1},
                                {-1,-1,-1,-1,-1,-1},
                                {-1,15,-1,-1,-1,-1}};
                                
                                
    cout<<snakesAndLadders(board);
    return 0;
}
