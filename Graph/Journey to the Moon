https://www.hackerrank.com/challenges/journey-to-the-moon/problem

1. Use DFS and find all connected nodes and push it into a vector eg n=4, 1--2--3 so [[0],[1,2,3]] now ans= ans[0].size() + ans[1].size()

Time:O(V+E), Space:O(V+E)

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'journeyToMoon' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. 2D_INTEGER_ARRAY astronaut
 */

void dfs(vector<int> adj[], vector<bool>& vis,int n, int node, vector<int>& temp)
{
    vis[node]=true;
    temp.push_back(node);
    
    for(int i=0;i<adj[node].size();i++)
    {
        if(!vis[adj[node][i]])
        {
            dfs(adj,vis,n,adj[node][i],temp);
        }
    }
}

int journeyToMoon(int n, vector<vector<int>> astronaut) {
    
    int edges=astronaut.size();
    
    vector<int> adj[n];
    for(int i=0;i<edges;i++)
    {
        int k1=astronaut[i][0];
        int k2=astronaut[i][1];
        adj[k1].push_back(k2);
        adj[k2].push_back(k1);
    }
    
    vector<bool> vis(n,false);
    vector<vector<int>> ans;
    for(int i=0;i<n;i++)
    {
        if(!vis[i])
        {
            vector<int>temp;
            dfs(adj,vis, n, i, temp);
            ans.push_back(temp);
        }
    }
    
    int total=0;
    
    if(ans.size()==1)
    {
        return 0;
    }
    
    for(int i=0;i<ans.size();i++)
    {
        for(int j=i+1;j<ans.size();j++)
        {
            total+=ans[i].size()*ans[j].size();
        }
    }
    
    return total;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int n = stoi(first_multiple_input[0]);

    int p = stoi(first_multiple_input[1]);

    vector<vector<int>> astronaut(p);

    for (int i = 0; i < p; i++) {
        astronaut[i].resize(2);

        string astronaut_row_temp_temp;
        getline(cin, astronaut_row_temp_temp);

        vector<string> astronaut_row_temp = split(rtrim(astronaut_row_temp_temp));

        for (int j = 0; j < 2; j++) {
            int astronaut_row_item = stoi(astronaut_row_temp[j]);

            astronaut[i][j] = astronaut_row_item;
        }
    }

    int result = journeyToMoon(n, astronaut);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
