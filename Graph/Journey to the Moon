https://www.hackerrank.com/challenges/journey-to-the-moon/problem

1. Use DFS and find all connected nodes and push it into a vector eg n=4, 1--2--3 so [[0],[1,2,3]] now ans= ans[0].size() + ans[1].size()

Time:O(V+E), Space:O(V+E)

 void dfs(int node, vector<bool>& vis, vector<vector<int>>& adj, int& count)
 {
     vis[node]=true;
     count++;
     
     for(int i=0;i<adj[node].size();i++)
     {
         if(!vis[adj[node][i]])
         {
             dfs(adj[node][i],vis,adj,count);
         }
     }
     
 }

int journeyToMoon(int n, vector<vector<int>> astronaut) {
    
    if(n<=1)
    {
        return 0;
    }
    
    vector<int> solution;
    
    vector<bool> vis(n,false);
    vector<vector<int>> adj(n);
    
    for(int i=0;i<astronaut.size();i++)
    {
        int first=astronaut[i][0];
        int second=astronaut[i][1];
        
        adj[first].push_back(second);
        adj[second].push_back(first);
    }
    
    for(int i=0;i<n;i++)
    {
        if(!vis[i])
        {
            int count=0;
            dfs(i,vis,adj,count);
            solution.push_back(count);
        }
        
    }
    
    int total=(n*(n-1))/2;
    
    int sameWays=0;
    
    for(int i=0;i<solution.size();i++)
    {
        int value=(solution[i]*(solution[i]-1))/2;
        
        sameWays=sameWays+ value;
    }
    
    return total-sameWays;

}
