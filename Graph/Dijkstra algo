https://www.youtube.com/watch?v=F3PNsWE6_hM


1. Dij is used to find smallest dist of all points from a node with no neg weight cycle.
2. The idea is find the dist of all node from the start node, craete a viisted array and dist vector which will store dist of all node from start, dist[start node from itself]=0.
3. Update the dist of all neigh of start in the dist vector. Find the closest node makr it as visisted for every non-visisted node, check if min(curr node dist, node dist from src via the closest node)
4. We run this (V-1) times bcoz at last only one node is left and it has no neighbours.
5. To find the closest node, we can either travserse everytime or use priorty queue.


Time:O(V logV + ElogV)
Space:O(V+E)

 int minimumEdgeReversal(vector<vector<int>> &edges,int n,int src,int dst)
        {
            src=src-1;
            dst=dst-1;
            vector<vector<pair<int,int>>> adj(n);   
            
            for(int i=0;i<edges.size();i++)
            {
                int first=edges[i][0]-1;
                int second=edges[i][1]-1;
                
                adj[first].push_back(make_pair(second,0));
                adj[second].push_back(make_pair(first,1));
            }
            
            
            vector<int> dist(n,1000000009);
            vector<bool> vis(n,false);
            
            set<pair<int,int>> st;  //dist,node
            
            dist[src]=0;
            
            st.insert(make_pair(0,src));
            
            while(!st.empty())
            {
                auto itr=*(st.begin());
                st.erase(itr);
                
                int minDist=itr.first;
                int node=itr.second;
                
                vis[node]=true;
                
                for(int i=0;i<adj[node].size();i++)
                {
                    int v=adj[node][i].first;
                    int wt=adj[node][i].second;
                    
                    if(!vis[v] && dist[v]>dist[node]+wt)
                    {
                        auto it=st.find(make_pair(dist[v],v));
                        
                        if(it!=st.end())
                        {
                            st.erase(it);
                        }
                        
                        dist[v]=dist[node]+wt;
                        st.insert(make_pair(dist[v],v));
                    }
                    
                    
                }
                
                
                
            }
            
            if(dist[dst]==1000000009)
            {
                return -1;
            }
            
            return dist[dst];
            
                      
        }
