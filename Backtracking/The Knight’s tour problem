https://www.youtube.com/watch?v=pwlxQeHchFQ
https://www.geeksforgeeks.org/the-knights-tour-problem-backtracking-1/

Time:O(8^n*2)->8 choices for n^2 bpxes
Space:O(n^2)

#include<iostream>
#include<vector>

using namespace std;

//instead of a separed visisted matrix, initially set all value in matrix as -1, if it is viisted, it will be replaced by the count

bool move(vector<vector<int>>& vis, int i, int j,int count, int n, int diri[], int dirj[])
{
	if(count==n*n)
	{
		//cout<<"trye";
		return true;
	}
	
	for(int x=0;x<8;x++)
	{
		if(i+diri[x]>=0 && i+diri[x]<n && j+dirj[x]>=0 && j+dirj[x]<n && vis[i+diri[x]][j+dirj[x]]==-1)
		{
			
			
			
			vis[i+diri[x]][j+dirj[x]]=count;
			
			
			if(move(vis,i+diri[x],j+dirj[x],count+1,n,diri,dirj))
			{
				return true;
			}
			else
			{
			    vis[i+diri[x]][j+dirj[x]]=-1;
			    
			}
			
			
			
		}
	}
	return false;
	
	
}

int main()
{
	int n=8;
	
	vector<vector<int>> vis(n, vector<int>(n,-1));
	vis[0][0]=0;
	
	int diri[]={ 2, 1, -1, -2, -2, -1, 1, 2 };
	int dirj[]={ 1, 2, 2, 1, -1, -2, -2, -1 };
	int count=1;
	
	if(!move(vis,0,0,count,n,diri,dirj)){
	    cout<<"No solution";
	}
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			cout<<vis[i][j]<<" ";
		}
		cout<<"\n";
	}
	
	
	
	
	return 0;
}


0 59 38 33 30 17 8 63 
37 34 31 60 9 62 29 16 
58 1 36 39 32 27 18 7 
35 48 41 26 61 10 15 28 
42 57 2 49 40 23 6 19 
47 50 45 54 25 20 11 14 
56 43 52 3 22 13 24 5 
51 46 55 44 53 4 21 12 
