https://www.youtube.com/watch?v=FWAIf_EVUKE
https://www.geeksforgeeks.org/sudoku-backtracking-7/
https://practice.geeksforgeeks.org/problems/solve-the-sudoku-1587115621/1#

1. Travserse the matrix and find an empty position.
2. Once found, find which no will be safe there, if u found a safe no->put it there and recurse to find next empty block. Since we want a valid soln so stop once u fins one by returning true, else it will run for all recurs
3. If in the next recur, u get false, backtrack and remove that no
4. If for an empty place, u do not find a char at all, return false
5. If u do not find any empty place at all, retrun true, u have filled all.

Time:O(9^(N^2)), total boxes N^2, 9 possibilities
Space:O(N^2)-> return a matrix


 bool isSafe(int row, int col, int num,int grid[N][N] )
    {
        
        for(int i=0;i<N;i++)
        {
            //check row
            if(grid[row][i]==num)
            {
                return false;
            }
            
            //check col
            if(grid[i][col]==num)
            {
                return false;
            }
            
            //check box
            if(grid[3*(row/3)+(i/3)][3*(col/3)+(i%3)]==num)
            {
                return false;
            }
        }
        
        return true;
        
        
    }
    
    
    bool SolveSudoku(int grid[N][N])  
    { 
        // Your code here
        for(int row=0;row<N;row++)
        {
            for(int col=0;col<N;col++)
            {
                if(grid[row][col]==0) //empty
                {
                    for(int x=1;x<=9;x++)
                    {
                        if(isSafe(row,col,x,grid))
                        {
                            grid[row][col]=x;
                            if(SolveSudoku(grid))
                            {
                                return true;
                            }
                            else
                            {
                                grid[row][col]=0;
                            }
                        }
                    }
                    
                    return false; //no value is safe
                }
            }
        }
        
        //no block is empty, all filled
        return true;
        
        
        
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        // Your code here 
        
        for(int i=0;i<N;i++)
        {
            for(int j=0;j<N;j++)
            {
                cout<<grid[i][j]<<" ";
            }
            //cout<<endl;
        }
    }
