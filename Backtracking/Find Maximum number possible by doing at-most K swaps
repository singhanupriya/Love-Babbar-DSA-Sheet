

Time:O(N^2)^k, Space:O(N)
For every recursive call n^2 recursive calls is generated until the value of k is 0. So total recursive calls are O((n^2)^k).
Every n^2 calls go uptil k times

1. Try all swaps.
2. Ways to swap = n^2, i->0 to n and j->i+1 to n, swap only when arr[j]>arr[i], compare with ans and decrement k.
3. Do until k==0 or no more swaps possible

void solve(string& max, string str, int k)
    {
        
        if(k==0)
        {
            return;
        }
        
        int len=str.length();
        
        for(int i=0;i<len;i++)
        {
            for(int j=i+1;j<len;j++)
            {
                if(str[i]<str[j])
                {
                    swap(str[i],str[j]);
                    
                    if(str.compare(max)>0)
                    {
                        max=str;
                    }
                    //solve ahead
                    solve(max,str,k-1);
                    swap(str[i],str[j]);
                    
                }
            }
        }
        
        
    }
    
    string findMaximumNum(string str, int k)
    {
       // code here.
       string max=str;
       solve(max,str,k);
       return max;
       
    }
