

Time:O(N*2^N) , n->push elements to vector

void solve(vector<int> &A, int B,int i, int n, vector<int> temp, vector<vector<int>>& ans)
    {
        if(B==0)
        {
            ans.push_back(temp);
            return;
        }
        
        
        while(i<n && A[i]<=B)
        {
            temp.push_back(A[i]);
            solve(A,B-A[i],i,n,temp,ans);
            temp.pop_back();
            i++;
        }
    }
    
    
    vector<vector<int> > combinationSum(vector<int> &A, int B) {
        // Your code here
        
        int n=A.size();
        set<int> s;
        
        for(int i=0;i<n;i++)
        {
            s.insert(A[i]);
        }
        
        vector<int> arr;
        A.clear();
        
        for(auto it:s)
        {
            arr.push_back(it);
        }
        
        int m=arr.size();
        
        vector<vector<int>> ans;
        vector<int> temp(0);
        solve(arr,B,0,m,temp,ans);
        
        sort(ans.begin(),ans.end());
        return ans;
    }
