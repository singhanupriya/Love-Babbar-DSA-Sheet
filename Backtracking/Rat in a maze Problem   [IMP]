https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1
https://www.youtube.com/watch?v=bLGZhJlt4y0


Time:O(4^(N*2)), total boxes n*n, at each box 4 choices
Space: recursion stack, max->every cell is in path O(n^2)

class Solution{
    public:
    
    void rat(vector<vector<int>> &m, int n, int i, int j, vector<vector<int>> &vis, vector<int> diri, vector<int>dirj, string temp,vector<string> &ans)
    {
        
        
        //base
        if(i==n-1 && j==n-1)
        {
            ans.push_back(temp);
            return;
        }
        
        //check for diections DLRU
        
        string dir="DLRU";
        for(int x=0;x<4;x++)
        {
            if(i+diri[x]>=0 && i+diri[x]<n && j+dirj[x]>=0 && j+dirj[x]<n && vis[i+diri[x]][j+dirj[x]]==0 && m[i+diri[x]][j+dirj[x]]==1)
            {
                vis[i][j]=1;
                rat(m,n,i+diri[x],j+dirj[x],vis,diri,dirj,temp+dir[x],ans);
                vis[i][j]=0;
            }
        }
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        
        vector<string> ans;
        
        vector<int> diri{1,0,0,-1}; //DLRU
        vector<int> dirj{0,-1,1,0}; //DLRU;
        
        vector<vector<int>> vis(n,vector<int>(n,0));
        
        if(m[0][0]==0 || m[n-1][n-1]==0)   //not possible
        {
            return ans;
        }
        
        rat(m,n,0,0,vis,diri,dirj,"",ans);
        return ans;
    }
};

    
