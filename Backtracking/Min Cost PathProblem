

Brute- with backtracking try all possible path with all cols in first row
Time-O(exp)

 int max(int a,int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }

    void solve(vector<vector<int>> mat, int N, int i, int j, int dirx[], int diry[], int temp, int& ans)
    {
        if(i==N-1)
        {
            ans=max(ans,temp+mat[i][j]);
        }
        
        for(int x=0;x<3;x++)
        {
            if(i+dirx[x]>=0 && i+dirx[x]<N && j+diry[x]>=0 && j+diry[x]<N)
            {
                temp=temp+mat[i][j];
                solve(mat,N,i+dirx[x],j+diry[x],dirx,diry,temp,ans);
                temp=temp-mat[i][j];
            }
        }
        
    }
    
    int maximumPath(int N, vector<vector<int>> mat)
    {
        // code here
        
        int dirx[]={1,1,1};
        int diry[]={-1,0,1};
        
        int ans=INT_MIN;
        
        for(int j=0;j<N;j++)
        {
            solve(mat,N,0,j,dirx,diry,0,ans);
        }
        
        return ans;
    }
    
    
    DP- we have choice and optimisation so can use DP.
    start from last row and find max sum, from second last find max sum to go to last, ......smaller to bigger problem
    dp[i][j]- max sum from that point to reach last row
    
    Time:o(n*n), Space:o(n*n)
    
    int max(int a,int b)
    {
        if(a>=b)
        {
            return a;
        }
        return b;
    }
    
    int maximumPath(int N, vector<vector<int>> mat)
    {
        // code here
        
        vector<vector<int>> dp(N, vector<int>(N,0));
        
        for(int i=0;i<N;i++)
        {
            dp[N-1][i]=mat[N-1][i];
        }
        
        int dirx[]={1,1,1};
        int diry[]={-1,0,1};
        
        for(int i=N-2;i>=0;i--)
        {
            for(int j=0;j<N;j++)
            {
                for(int x=0;x<3;x++)
                {
                    if(i+dirx[x]>=0 && i+dirx[x]<N && j+diry[x]>=0 && j+diry[x]<N)
                    {
                        dp[i][j]=max(dp[i][j],mat[i][j]+dp[i+dirx[x]][j+diry[x]]);
                    }
                }
            }
        }
        
        int ans=INT_MIN;
        for(int i=0;i<N;i++)
        {
            ans=max(ans,dp[0][i]);
        }
        
        return ans;
    }
};
