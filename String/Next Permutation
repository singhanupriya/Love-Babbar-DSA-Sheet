https://www.youtube.com/watch?v=LuLCLgMElus&t=63s


1. Find the index which will be replaced by its next greater ->  Traverse the array from end and find i (index1) such that arr[i]<arr[i+1], 
    if no, then no next permutaion exists.
2. Find the number that will replace it -> Traverse from end and find index2 such that arr[index2]>arr[index1]
3. Swap arr[index1],arr[index2] and reverse the array from index1+1 to end.

Time:O(N), Space:O(1)


void swap(int& a, int& b)
    {
        int temp=a;
        a=b;
        b=temp;
    }
    
    void nextPermutation(vector<int>& arr) {
        
        int index1=-1;
        
        int n=arr.size();
        
        for(int i=n-2;i>=0;i--)
        {
            if(arr[i]<arr[i+1])
            {
                index1=i;
                break;
            }
        }
        
        if(index1==-1)
        {
            sort(arr.begin(),arr.end());
            return;
        }
        
        int index2=-1;
        
        for(int i=n-1;i>=0;i--)
        {
            if(arr[i]>arr[index1])
            {
                index2=i;
                break;
            }
        }
        
        //cout<<index1<<" "<<index2;
        
        swap(arr[index1],arr[index2]);
        reverse(arr.begin()+index1+1,arr.end());
        
        
    }
