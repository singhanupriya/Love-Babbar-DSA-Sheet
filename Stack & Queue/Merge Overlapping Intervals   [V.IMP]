https://leetcode.com/problems/merge-intervals/submissions/


M1- Time:O(nlogn), Space:O(N)

1. Sort the intervals first, the start of each interval will be sorted in increasing order.
2. Use any DS, like stack, push the first interval in stack.
3. Iterate thru the vector 1->n-1; Compare if top.end>=vector<start>, pop top, end=max(top.end,vector.end), push this
You can save space by updating the vector itself



class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        
        vector<vector<int>> res;
        int n=intervals.size();
        if(n==0)
        {
            return res;
        }
        stack<vector<int>> s;
        sort(intervals.begin(),intervals.end());
        
        s.push(intervals[0]);
        
        for(int i=1;i<n;i++)
        {
            vector<int> a=s.top();
            if(a[1]>=intervals[i][0])
            {
                s.pop();
                a[1]=max(a[1],intervals[i][1]);
                s.push(a);
            }
            else
            {
                s.push(intervals[i]);
            }
        }
        
        while(!s.empty())
        {
            res.push_back(s.top());
            s.pop();
        }
        
        reverse(res.begin(),res.end());
        return res;
        
    }
};


M2- Time:O(nlogn), Space:O(1)

1. Instead of using any DS u can take an index variable and modiy the array, index->depicting the last modified entry of array
2. Set index=0, i->1 to n-1

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int max(int a,int b)
{
    if(a>=b)
    {
        return a;
    }
    return b;
}

void merge(vector<vector<int>>& arr)
{
    int n=arr.size();
    if(n==0)
    {
        return;
    }
    
    sort(arr.begin(),arr.end());
    int index=0;
    
    for(int i=1;i<n;i++)
    {
        if(arr[index][1]>=arr[i][0])
        {
            //cout<<"o";
            arr[index][1]=max(arr[index][1],arr[i][1]);
        }
        else
        {
            index++;
            arr[index][0]=arr[i][0];
            arr[index][1]=arr[i][1];
        }
        
    }
    
    for(int i=0;i<=index;i++)
        {
            cout<<arr[i][0]<<" "<<arr[i][1]<<"\n";
        }
    
    
    
}

int main()
{
    vector<vector<int>> arr { {1,3}, {2,6}, {8,10}, {15,18} };
    
    merge(arr);
    //return 0;
    return 0;
}
