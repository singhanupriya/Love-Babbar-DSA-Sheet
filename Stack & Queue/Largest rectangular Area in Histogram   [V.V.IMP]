https://www.youtube.com/watch?v=J2X70jj_I1o&list=PL_z_8CaSLPWdeOezg68SKkeLN4-T_jNHd&index=7
https://practice.geeksforgeeks.org/problems/maximum-rectangular-area-in-a-histogram-1587115620/1

1. Any building can include its adj bars only if they are >=it, hence,we need to find nearest smallest on left and right index of every element.
2. If no nearest smaller on right, instead of -1 set it to n like index n=0 ground.
3. Ans= max((nsr[i]-nsl[i]-1)*arr[i])

Time:O(N), Space:O(N)

//Function to find largest rectangular area possible in a given histogram.
    long long getMaxArea(long long arr[], int n)
    {
        // Your code here
        
        
        vector<long long> nsl;
        stack<pair<long long,int>> s;
        
        for(int i=0;i<n;i++)
        {
            if(s.empty())
            {
                nsl.push_back(-1);
            }
            else
            {
                if(s.top().first<arr[i])
                {
                    nsl.push_back(s.top().second);
                }
                else
                {
                    while(!s.empty() && s.top().first>=arr[i])
                    {
                        s.pop();
                    }
                    if(s.empty())
                    {
                        nsl.push_back(-1);
                    }
                    else
                    {
                        nsl.push_back(s.top().second);
                    }
                }
            }
            
            s.push(make_pair(arr[i],i));
        }
        
        vector<long long> nsr;
        stack<pair<long long,int>> t;
        
        for(int i=n-1;i>=0;i--)
        {
            if(t.empty())
            {
                nsr.push_back(n);
            }
            else
            {
                if(t.top().first < arr[i])
                {
                    nsr.push_back(t.top().second);
                }
                else
                {
                    while(!t.empty() && t.top().first>=arr[i])
                    {
                        t.pop();
                    }
                    if(t.empty())
                    {
                        nsr.push_back(n);
                    }
                    else
                    {
                        nsr.push_back(t.top().second);
                    }
                }
            }
            
            t.push(make_pair(arr[i],i));
        }
        reverse(nsr.begin(),nsr.end());
        
        long long ans=INT_MIN;
        
        for(int i=0;i<n;i++)
        {
            long long temp=(nsr[i]-nsl[i]-1)*arr[i];
            if(ans<temp)
            {
                ans=temp;
            }
        }
        return ans;
    }
};
