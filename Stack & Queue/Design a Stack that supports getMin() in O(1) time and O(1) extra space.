https://practice.geeksforgeeks.org/problems/special-stack/1#

1. Use a global variable min that will store the min value.
2. If stack is empty, push(a) and min=a.
3. If element(x) to be pushed>min, push normally else  pushed ele=2*x-min, min= x --> this value will be less that the new min which is used a flag, means the min element resides here
4. If popping, if top>=min pop, else means u have hit a flag means min element is being popped, new min=2*old min-top

Time:O(1), Space:O(1)

#include<iostream>
#include<stack>

using namespace std;

class SpecialStack{
    int min;
    stack<int> s;
    
    public:
        void push(int a){
    	// Your code goes here
        	if(s.empty())
        	{
        	    min=a;
        	    s.push(a);
        	}
        	if(a>=min)
        	{
        	    s.push(a);
        	}
        	else
        	{
        	    
        	    s.push(2*a-min);
        	    min=a;
        	    
        	}
        }

        bool isFull(int n){
        	// Your code goes here
        	if(s.size()==n)
        	{
        	    return true;
        	}
        	return false;
        }

        bool isEmpty(){
        	// Your code goes here
        	if(s.size()==0)
        	{
        	    return true;
        	}
        	return true;
        }

        int pop(){
        	// Your code goes here
        	if(s.top()>=min)
        	{
        	    int a=s.top();
        	    s.pop();
        	    return a;
        	}
        	else
        	{
        	    int a=min;
        	    min=2*min-s.top();
        	    s.pop();
        	    return a;
        	    
        	   
        	}
        }

        int getMin(){
        	// Your code goes here
        	
        	if(s.empty())
        	{
        	    return -1;
        	}
        	return min;
        }
};

int main()
{
    SpecialStack st;
    st.push(18);
    cout<<"min "<<st.getMin()<<"\n";
    st.push(19);
    cout<<"min "<<st.getMin()<<"\n";
    st.push(2);
    cout<<"min "<<st.getMin()<<"\n";
    st.push(15);
    cout<<"min "<<st.getMin()<<"\n";
    st.push(16);
    cout<<"min "<<st.getMin()<<"\n";
    cout<<"Popped "<<st.pop()<<"\n";
    cout<<"min "<<st.getMin()<<"\n";
    cout<<"Popped "<<st.pop()<<"\n";
    cout<<"min "<<st.getMin()<<"\n";
    cout<<"Popped "<<st.pop()<<"\n";
    cout<<"min "<<st.getMin()<<"\n";
    cout<<"Popped "<<st.pop()<<"\n";
    cout<<"min "<<st.getMin()<<"\n";
}




POinter approach:

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;


class Stack{
    
    int* arr;
    int size;
    int top;
    
    public:
    Stack(int size)
    {
        this->size=size;
        arr=new int[size];
        top=-1;
    }
    
    void push(int x)
    {
        if(top==size-1)
        {
            cout<<"Stack overflow\n";
            return;
        }
        
        top++;
        arr[top]=x;
        //cout<<x<<" has been pushed at index "<<top<<"\n";
        return;
        
        
    }
    
    void pop()
    {
        if(top==-1)
        {
            cout<<"Stack underflow\n";
            return;
        }
        top--;
    }
    
    int viewTop()
    {
        if(top==-1)
        {
            return -1;
        }
        
        return arr[top];
    }
    
    bool isEmpty()
    {
        if(top==-1)
        {
            return true;
        }
        
        return false;
    }
    
    
    
};

class MinStack{
    
    Stack* s;
    int min;
    int size;
    
    public:
    
    MinStack(int size)
    {
        s=new Stack(size);
        
        
    }
    
    void minPush(int x)
    {
        if(s->isEmpty())
        {
            s->push(x);
            min=x;
            return;
        }
        
        if(x<min)
        {
           
            s->push(2*x-min);  //flag to denotes that this element is smaller than min
            min=x;
        }
        else
        {
            s->push(x);
        }
        
        
    }
    
    int getMin()
    {
        if(s->isEmpty())
        {
            return -1;
        }
        return min;
    }
    
    void minPop()
    {
        if(s->isEmpty())
        {
            cout<<"Stack Underflow\n";
            return;
        }
        
        if(s->viewTop()>=min)
        {
            s->pop();
        }
        else
        {
            min=2*min - s->viewTop();
            s->pop();
        }
    }
    
    
};

int main()
{
    MinStack* s=new MinStack(10);
    s->minPush(16);
    cout<<s->getMin()<<endl;
    s->minPush(15);
    cout<<s->getMin()<<endl;
    s->minPush(18);
    cout<<s->getMin()<<endl;
    s->minPush(29);
    cout<<s->getMin()<<endl;
    s->minPush(19);
    cout<<s->getMin()<<endl;
    s->minPush(10);
    cout<<s->getMin()<<endl;
    s->minPop();
    cout<<s->getMin()<<endl;
    
    return 0;
}


Time:O(1), Space:O(N)

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;


class Stack{
    
    int* arr;
    int size;
    int top;
    
    public:
    Stack(int size)
    {
        this->size=size;
        arr=new int[size];
        top=-1;
    }
    
    void push(int x)
    {
        if(top==size-1)
        {
            cout<<"Stack overflow\n";
            return;
        }
        
        top++;
        arr[top]=x;
        //cout<<x<<" has been pushed at index "<<top<<"\n";
        return;
        
        
    }
    
    void pop()
    {
        if(top==-1)
        {
            cout<<"Stack underflow\n";
            return;
        }
        top--;
    }
    
    int viewTop()
    {
        if(top==-1)
        {
            return -1;
        }
        
        return arr[top];
    }
    
    bool isEmpty()
    {
        if(top==-1)
        {
            return true;
        }
        
        return false;
    }
    
    
    
};

class MinStack{
    
    Stack* s;
    Stack* aux;
    int size;
    
    public:
    
    MinStack(int size)
    {
        s=new Stack(size);
        aux=new Stack(size);
        
    }
    
    void minPush(int x)
    {
        if(s->isEmpty())
        {
            s->push(x);
            aux->push(x);
            return;
        }
        
        s->push(x);
        if(aux->viewTop() >= x)
        {
            aux->push(x);
        }
    }
    
    int getMin()
    {
        if(!aux->isEmpty())
        {
            return aux->viewTop();
        }
        return -1;
    }
    
    void minPop()
    {
        if(s->viewTop()==aux->viewTop())
        {
            s->pop();
            aux->pop();
            return;
        }
        
        s->pop();
    }
    
    
};

int main()
{
    MinStack* s=new MinStack(10);
    s->minPush(16);
    cout<<s->getMin()<<endl;
    s->minPush(15);
    cout<<s->getMin()<<endl;
    s->minPush(18);
    cout<<s->getMin()<<endl;
    s->minPush(29);
    cout<<s->getMin()<<endl;
    s->minPush(19);
    cout<<s->getMin()<<endl;
    s->minPush(10);
    cout<<s->getMin()<<endl;
    s->minPop();
    cout<<s->getMin()<<endl;
    
    return 0;
}
