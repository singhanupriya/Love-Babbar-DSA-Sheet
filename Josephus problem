https://www.youtube.com/watch?v=ULUNeD0N9yI
https://www.geeksforgeeks.org/josephus-problem-set-1-a-on-solution/

https://www.youtube.com/watch?v=46zD5d9y9b4

Time:O(N), Space:O(N)

 int solve(int n, int k)
    {
        if(n==1)
        {
            return 0; //0 index will remain
        }
        
        return (solve(n-1,k)+k)%n;
    }
    
    int josephus(int n, int k)
    {
       //Your code here
       
       
       return solve(n,k)+1; //as ans is 1 based indexing
       
    }

Method 1:

1. make a circular DLL with head as node 1, run loop (n-1)times, as n-1 ppl will be killed, traverse the node and everytime delete the kth node and 
correct next and prev pointers.
2. I have chosen DLL bcoz I need to adj next and prev links once a person dies

Note: Every kth person is killed, once the kth person is killed, the person next to it starts.

Time:O(N^2), Space:O(N)


if(n==1 && k>0)
    {
        return 1;
    }
    
    //this is n>1
    Node* head=new Node(1);
    Node* p=head;
    
    for(int i=2;i<=n;i++)
    {
        Node* temp=new Node(i);
        p->next=temp;
        temp->prev=p;
        p=p->next;
    }
    
    p->next=head;
    head->prev=p;
    
    //as n-1 ppl will die run loop n-1 times;
    
    Node* curr=head;
    
    for(int i=0;i<n-1;i++)
    {
        
        int count=1;
        
        while(count<k)
        {
            curr=curr->next;
            count++;
        }
        
        //curr will die adj nodes
        
        curr->prev->next=curr->next;
        curr->next->prev=curr->prev;
        Node* temp=curr->next;
        curr->next=nullptr;
        curr->prev=nullptr;
        curr=temp;  //now next starting point
        
        
        
        
        
    }
    
    return curr->data;
    
    }
    
    
    Method 2:
    
    1. This is recursion as every next state depends on the prev state, who died and who will start
    2. using vector, kill the person, reduce vector size by 1 and move all elements by 1 to the left ans start again
    
    
    Time:O(N^2), Space:O(N)
    
     void solve(vector<int>& person, int index, int k, int& ans)
    {
        //base case when only one element is left
        if(person.size()==1)
        {
            ans=person[0];
            return;
        }
        
        //index to be killed
        
        index= (index + (k-1))% person.size();
        
        //k-1 as this is 0 based indexing
        person.erase(person.begin()+index);
        
        //solve for remaining
        
        solve(person,index,k,ans); //start will be from this index as all 
        //elements will shift to the left
        
        
        
    }
  
  
    int safePos(int n, int k) {
        // code here
    
        vector<int> person;
        // fill the person vector
        for (int i = 1; i <= n; i++) {
            person.push_back(i);
        }
        int ans=-1;
        solve(person,0,k,ans);
        return ans;
    }
